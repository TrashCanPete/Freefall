Shader "Cloud Shader"
{
	Properties
	{
		Vector4_58BB93F7("RotateProjection", Vector) = (1,0,0,0)
Vector1_AF480FB0("Noise Scale ", Float) = 10
Vector1_6FC0738F("Noise Speed ", Float) = 0.1
Vector4_46291EA8("Noise Remap", Vector) = (0,1,-1,2)
Vector1_53879FF9("Noise Height ", Float) = 100
Color_9CF0A665("Color Valley", Color) = (0.5802777,0.754717,0.754717,0)
Color_761E3BF0("Color Peak", Color) = (0.8416696,0.9061152,0.9245283,0)
Vector1_F326F04("Noise Edge 1 ", Float) = 0
Vector1_5E914204("Noise Edge 2 ", Float) = 1
Vector1_6EF1F52E("Noise Power ", Float) = 3
Vector1_160035B9("Base Scale ", Float) = 2
Vector1_767C2BCB("Base Speed ", Float) = 0.1
Vector1_6FA2E258("Base Strength ", Float) = 3
Vector1_CC7180D("Curviture radius ", Float) = 0
Vector1_118F9AE3("Fresnel Power ", Float) = 1
Vector1_7DCA2CFD("Fresnel Opacity ", Float) = 2
Vector1_7C6FDCBA("Fade Depth ", Float) = 1

	}
		SubShader
	{
		Tags
		{
			"RenderPipeline" = "LightweightPipeline"
			"RenderType" = "Transparent"
			"Queue" = "Transparent+0"
		}
		Pass
		{
			Tags{"LightMode" = "LightweightForward"}

			// Material options generated by graph

			Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha

			Cull Off

			ZTest LEqual

			ZWrite On

			HLSLPROGRAM
		// Required to compile gles 2.0 with standard srp library
		#pragma prefer_hlslcc gles
		#pragma exclude_renderers d3d11_9x
		#pragma target 2.0

		// -------------------------------------
		// Lightweight Pipeline keywords
		#pragma multi_compile _ _MAIN_LIGHT_SHADOWS
		#pragma multi_compile _ _MAIN_LIGHT_SHADOWS_CASCADE
		#pragma multi_compile _ _ADDITIONAL_LIGHTS_VERTEX _ADDITIONAL_LIGHTS
		#pragma multi_compile _ _ADDITIONAL_LIGHT_SHADOWS
		#pragma multi_compile _ _SHADOWS_SOFT
		#pragma multi_compile _ _MIXED_LIGHTING_SUBTRACTIVE

		// -------------------------------------
		// Unity defined keywords
		#pragma multi_compile _ DIRLIGHTMAP_COMBINED
		#pragma multi_compile _ LIGHTMAP_ON
		#pragma multi_compile_fog

		//--------------------------------------
		// GPU Instancing
		#pragma multi_compile_instancing

		#pragma vertex vert
		#pragma fragment frag

		// Defines generated by graph
		#define REQUIRE_DEPTH_TEXTURE

		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
		#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"

		CBUFFER_START(UnityPerMaterial)
		float4 Vector4_58BB93F7;
		float Vector1_AF480FB0;
		float Vector1_6FC0738F;
		float4 Vector4_46291EA8;
		float Vector1_53879FF9;
		float4 Color_9CF0A665;
		float4 Color_761E3BF0;
		float Vector1_F326F04;
		float Vector1_5E914204;
		float Vector1_6EF1F52E;
		float Vector1_160035B9;
		float Vector1_767C2BCB;
		float Vector1_6FA2E258;
		float Vector1_CC7180D;
		float Vector1_118F9AE3;
		float Vector1_7DCA2CFD;
		float Vector1_7C6FDCBA;
		CBUFFER_END

		struct VertexDescriptionInputs
		{
			float3 ObjectSpaceNormal;
			float3 WorldSpaceNormal;
			float3 ObjectSpacePosition;
			float3 WorldSpacePosition;
			float3 TimeParameters;
		};

		struct SurfaceDescriptionInputs
		{
			float3 WorldSpaceNormal;
			float3 TangentSpaceNormal;
			float3 WorldSpaceViewDirection;
			float3 WorldSpacePosition;
			float4 ScreenPosition;
			float3 TimeParameters;
		};


		void Unity_Distance_float3(float3 A, float3 B, out float Out)
		{
			Out = distance(A, B);
		}

		void Unity_Divide_float(float A, float B, out float Out)
		{
			Out = A / B;
		}

		void Unity_Power_float(float A, float B, out float Out)
		{
			Out = pow(A, B);
		}

		void Unity_Multiply_float(float3 A, float3 B, out float3 Out)
		{
			Out = A * B;
		}

		void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
		{
			Rotation = radians(Rotation);

			float s = sin(Rotation);
			float c = cos(Rotation);
			float one_minus_c = 1.0 - c;

			Axis = normalize(Axis);

			float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
									  one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
									  one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
									};

			Out = mul(rot_mat,  In);
		}

		void Unity_Multiply_float(float A, float B, out float Out)
		{
			Out = A * B;
		}

		void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
		{
			Out = UV * Tiling + Offset;
		}


	float2 Unity_GradientNoise_Dir_float(float2 p)
	{
		// Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
		p = p % 289;
		float x = (34 * p.x + 1) * p.x % 289 + p.y;
		x = (34 * x + 1) * x % 289;
		x = frac(x / 41) * 2 - 1;
		return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
	}

		void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
		{
			float2 p = UV * Scale;
			float2 ip = floor(p);
			float2 fp = frac(p);
			float d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);
			float d01 = dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));
			float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1, 0));
			float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 1)), fp - float2(1, 1));
			fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
			Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
		}

		void Unity_Add_float(float A, float B, out float Out)
		{
			Out = A + B;
		}

		void Unity_Saturate_float(float In, out float Out)
		{
			Out = saturate(In);
		}

		void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
		{
			RGBA = float4(R, G, B, A);
			RGB = float3(R, G, B);
			RG = float2(R, G);
		}

		void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
		{
			Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
		}

		void Unity_Absolute_float(float In, out float Out)
		{
			Out = abs(In);
		}

		void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
		{
			Out = smoothstep(Edge1, Edge2, In);
		}

		void Unity_Add_float3(float3 A, float3 B, out float3 Out)
		{
			Out = A + B;
		}

		void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
		{
			Out = lerp(A, B, T);
		}

		void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
		{
			Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
		}

		void Unity_Add_float4(float4 A, float4 B, out float4 Out)
		{
			Out = A + B;
		}

		void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
		{
			Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
		}

		void Unity_Subtract_float(float A, float B, out float Out)
		{
			Out = A - B;
		}

		struct VertexDescription
		{
			float3 Position;
		};

		VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
		{
			VertexDescription description = (VertexDescription)0;
			float _Distance_66864F21_Out_2;
			Unity_Distance_float3(SHADERGRAPH_OBJECT_POSITION, IN.WorldSpacePosition, _Distance_66864F21_Out_2);
			float _Property_365F1C22_Out_0 = Vector1_CC7180D;
			float _Divide_8FA1BFAE_Out_2;
			Unity_Divide_float(_Distance_66864F21_Out_2, _Property_365F1C22_Out_0, _Divide_8FA1BFAE_Out_2);
			float _Power_7BCE79D6_Out_2;
			Unity_Power_float(_Divide_8FA1BFAE_Out_2, 2, _Power_7BCE79D6_Out_2);
			float3 _Multiply_FB340743_Out_2;
			Unity_Multiply_float(IN.WorldSpaceNormal, (_Power_7BCE79D6_Out_2.xxx), _Multiply_FB340743_Out_2);
			float _Property_CFE1ED94_Out_0 = Vector1_F326F04;
			float _Property_D9B2DDCA_Out_0 = Vector1_5E914204;
			float4 _Property_AA563FF5_Out_0 = Vector4_58BB93F7;
			float _Split_160A2DF8_R_1 = _Property_AA563FF5_Out_0[0];
			float _Split_160A2DF8_G_2 = _Property_AA563FF5_Out_0[1];
			float _Split_160A2DF8_B_3 = _Property_AA563FF5_Out_0[2];
			float _Split_160A2DF8_A_4 = _Property_AA563FF5_Out_0[3];
			float3 _RotateAboutAxis_5F14F802_Out_3;
			Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_AA563FF5_Out_0.xyz), _Split_160A2DF8_A_4, _RotateAboutAxis_5F14F802_Out_3);
			float _Property_A6C59C8E_Out_0 = Vector1_6FC0738F;
			float _Multiply_A0E0F4C7_Out_2;
			Unity_Multiply_float(IN.TimeParameters.x, _Property_A6C59C8E_Out_0, _Multiply_A0E0F4C7_Out_2);
			float2 _TilingAndOffset_A4D1A3ED_Out_3;
			Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_A0E0F4C7_Out_2.xx), _TilingAndOffset_A4D1A3ED_Out_3);
			float _Property_B4B4E9CF_Out_0 = Vector1_AF480FB0;
			float _GradientNoise_A0D3B5C3_Out_2;
			Unity_GradientNoise_float(_TilingAndOffset_A4D1A3ED_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_A0D3B5C3_Out_2);
			float2 _TilingAndOffset_1E5A0899_Out_3;
			Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_1E5A0899_Out_3);
			float _GradientNoise_CE0772DA_Out_2;
			Unity_GradientNoise_float(_TilingAndOffset_1E5A0899_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_CE0772DA_Out_2);
			float _Add_D140788A_Out_2;
			Unity_Add_float(_GradientNoise_A0D3B5C3_Out_2, _GradientNoise_CE0772DA_Out_2, _Add_D140788A_Out_2);
			float _Divide_431432EB_Out_2;
			Unity_Divide_float(_Add_D140788A_Out_2, 2, _Divide_431432EB_Out_2);
			float _Saturate_3045B206_Out_1;
			Unity_Saturate_float(_Divide_431432EB_Out_2, _Saturate_3045B206_Out_1);
			float _Property_4A5644FC_Out_0 = Vector1_6EF1F52E;
			float _Power_9FF66C0B_Out_2;
			Unity_Power_float(_Saturate_3045B206_Out_1, _Property_4A5644FC_Out_0, _Power_9FF66C0B_Out_2);
			float4 _Property_C94C128A_Out_0 = Vector4_46291EA8;
			float _Split_23A88146_R_1 = _Property_C94C128A_Out_0[0];
			float _Split_23A88146_G_2 = _Property_C94C128A_Out_0[1];
			float _Split_23A88146_B_3 = _Property_C94C128A_Out_0[2];
			float _Split_23A88146_A_4 = _Property_C94C128A_Out_0[3];
			float4 _Combine_1590CA62_RGBA_4;
			float3 _Combine_1590CA62_RGB_5;
			float2 _Combine_1590CA62_RG_6;
			Unity_Combine_float(_Split_23A88146_R_1, _Split_23A88146_G_2, 0, 0, _Combine_1590CA62_RGBA_4, _Combine_1590CA62_RGB_5, _Combine_1590CA62_RG_6);
			float4 _Combine_818D0AEF_RGBA_4;
			float3 _Combine_818D0AEF_RGB_5;
			float2 _Combine_818D0AEF_RG_6;
			Unity_Combine_float(_Split_23A88146_B_3, _Split_23A88146_A_4, 0, 0, _Combine_818D0AEF_RGBA_4, _Combine_818D0AEF_RGB_5, _Combine_818D0AEF_RG_6);
			float _Remap_E8E080A5_Out_3;
			Unity_Remap_float(_Power_9FF66C0B_Out_2, _Combine_1590CA62_RG_6, _Combine_818D0AEF_RG_6, _Remap_E8E080A5_Out_3);
			float _Absolute_10AFA310_Out_1;
			Unity_Absolute_float(_Remap_E8E080A5_Out_3, _Absolute_10AFA310_Out_1);
			float _Smoothstep_53A845F3_Out_3;
			Unity_Smoothstep_float(_Property_CFE1ED94_Out_0, _Property_D9B2DDCA_Out_0, _Absolute_10AFA310_Out_1, _Smoothstep_53A845F3_Out_3);
			float _Property_52DC056C_Out_0 = Vector1_767C2BCB;
			float _Multiply_29661DD6_Out_2;
			Unity_Multiply_float(IN.TimeParameters.x, _Property_52DC056C_Out_0, _Multiply_29661DD6_Out_2);
			float2 _TilingAndOffset_AC342860_Out_3;
			Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_29661DD6_Out_2.xx), _TilingAndOffset_AC342860_Out_3);
			float _Property_A82178B0_Out_0 = Vector1_160035B9;
			float _GradientNoise_49D66967_Out_2;
			Unity_GradientNoise_float(_TilingAndOffset_AC342860_Out_3, _Property_A82178B0_Out_0, _GradientNoise_49D66967_Out_2);
			float _Property_5C65111_Out_0 = Vector1_6FA2E258;
			float _Multiply_6686FA7E_Out_2;
			Unity_Multiply_float(_GradientNoise_49D66967_Out_2, _Property_5C65111_Out_0, _Multiply_6686FA7E_Out_2);
			float _Add_2A5A5D89_Out_2;
			Unity_Add_float(_Smoothstep_53A845F3_Out_3, _Multiply_6686FA7E_Out_2, _Add_2A5A5D89_Out_2);
			float _Add_4F1E7955_Out_2;
			Unity_Add_float(3, _Property_5C65111_Out_0, _Add_4F1E7955_Out_2);
			float _Divide_1D64A51E_Out_2;
			Unity_Divide_float(_Add_2A5A5D89_Out_2, _Add_4F1E7955_Out_2, _Divide_1D64A51E_Out_2);
			float3 _Multiply_EA80A68F_Out_2;
			Unity_Multiply_float(IN.ObjectSpaceNormal, (_Divide_1D64A51E_Out_2.xxx), _Multiply_EA80A68F_Out_2);
			float _Property_AD66F131_Out_0 = Vector1_53879FF9;
			float3 _Multiply_2BAF07B0_Out_2;
			Unity_Multiply_float(_Multiply_EA80A68F_Out_2, (_Property_AD66F131_Out_0.xxx), _Multiply_2BAF07B0_Out_2);
			float3 _Add_D5BE1A59_Out_2;
			Unity_Add_float3(IN.ObjectSpacePosition, _Multiply_2BAF07B0_Out_2, _Add_D5BE1A59_Out_2);
			float3 _Add_91EF4868_Out_2;
			Unity_Add_float3(_Multiply_FB340743_Out_2, _Add_D5BE1A59_Out_2, _Add_91EF4868_Out_2);
			description.Position = _Add_91EF4868_Out_2;
			return description;
		}

		struct SurfaceDescription
		{
			float3 Albedo;
			float3 Normal;
			float3 Emission;
			float Metallic;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
		};

		SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
		{
			SurfaceDescription surface = (SurfaceDescription)0;
			float4 _Property_865DEE29_Out_0 = Color_9CF0A665;
			float4 _Property_F3C9D8B3_Out_0 = Color_761E3BF0;
			float _Property_CFE1ED94_Out_0 = Vector1_F326F04;
			float _Property_D9B2DDCA_Out_0 = Vector1_5E914204;
			float4 _Property_AA563FF5_Out_0 = Vector4_58BB93F7;
			float _Split_160A2DF8_R_1 = _Property_AA563FF5_Out_0[0];
			float _Split_160A2DF8_G_2 = _Property_AA563FF5_Out_0[1];
			float _Split_160A2DF8_B_3 = _Property_AA563FF5_Out_0[2];
			float _Split_160A2DF8_A_4 = _Property_AA563FF5_Out_0[3];
			float3 _RotateAboutAxis_5F14F802_Out_3;
			Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_AA563FF5_Out_0.xyz), _Split_160A2DF8_A_4, _RotateAboutAxis_5F14F802_Out_3);
			float _Property_A6C59C8E_Out_0 = Vector1_6FC0738F;
			float _Multiply_A0E0F4C7_Out_2;
			Unity_Multiply_float(IN.TimeParameters.x, _Property_A6C59C8E_Out_0, _Multiply_A0E0F4C7_Out_2);
			float2 _TilingAndOffset_A4D1A3ED_Out_3;
			Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_A0E0F4C7_Out_2.xx), _TilingAndOffset_A4D1A3ED_Out_3);
			float _Property_B4B4E9CF_Out_0 = Vector1_AF480FB0;
			float _GradientNoise_A0D3B5C3_Out_2;
			Unity_GradientNoise_float(_TilingAndOffset_A4D1A3ED_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_A0D3B5C3_Out_2);
			float2 _TilingAndOffset_1E5A0899_Out_3;
			Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_1E5A0899_Out_3);
			float _GradientNoise_CE0772DA_Out_2;
			Unity_GradientNoise_float(_TilingAndOffset_1E5A0899_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_CE0772DA_Out_2);
			float _Add_D140788A_Out_2;
			Unity_Add_float(_GradientNoise_A0D3B5C3_Out_2, _GradientNoise_CE0772DA_Out_2, _Add_D140788A_Out_2);
			float _Divide_431432EB_Out_2;
			Unity_Divide_float(_Add_D140788A_Out_2, 2, _Divide_431432EB_Out_2);
			float _Saturate_3045B206_Out_1;
			Unity_Saturate_float(_Divide_431432EB_Out_2, _Saturate_3045B206_Out_1);
			float _Property_4A5644FC_Out_0 = Vector1_6EF1F52E;
			float _Power_9FF66C0B_Out_2;
			Unity_Power_float(_Saturate_3045B206_Out_1, _Property_4A5644FC_Out_0, _Power_9FF66C0B_Out_2);
			float4 _Property_C94C128A_Out_0 = Vector4_46291EA8;
			float _Split_23A88146_R_1 = _Property_C94C128A_Out_0[0];
			float _Split_23A88146_G_2 = _Property_C94C128A_Out_0[1];
			float _Split_23A88146_B_3 = _Property_C94C128A_Out_0[2];
			float _Split_23A88146_A_4 = _Property_C94C128A_Out_0[3];
			float4 _Combine_1590CA62_RGBA_4;
			float3 _Combine_1590CA62_RGB_5;
			float2 _Combine_1590CA62_RG_6;
			Unity_Combine_float(_Split_23A88146_R_1, _Split_23A88146_G_2, 0, 0, _Combine_1590CA62_RGBA_4, _Combine_1590CA62_RGB_5, _Combine_1590CA62_RG_6);
			float4 _Combine_818D0AEF_RGBA_4;
			float3 _Combine_818D0AEF_RGB_5;
			float2 _Combine_818D0AEF_RG_6;
			Unity_Combine_float(_Split_23A88146_B_3, _Split_23A88146_A_4, 0, 0, _Combine_818D0AEF_RGBA_4, _Combine_818D0AEF_RGB_5, _Combine_818D0AEF_RG_6);
			float _Remap_E8E080A5_Out_3;
			Unity_Remap_float(_Power_9FF66C0B_Out_2, _Combine_1590CA62_RG_6, _Combine_818D0AEF_RG_6, _Remap_E8E080A5_Out_3);
			float _Absolute_10AFA310_Out_1;
			Unity_Absolute_float(_Remap_E8E080A5_Out_3, _Absolute_10AFA310_Out_1);
			float _Smoothstep_53A845F3_Out_3;
			Unity_Smoothstep_float(_Property_CFE1ED94_Out_0, _Property_D9B2DDCA_Out_0, _Absolute_10AFA310_Out_1, _Smoothstep_53A845F3_Out_3);
			float _Property_52DC056C_Out_0 = Vector1_767C2BCB;
			float _Multiply_29661DD6_Out_2;
			Unity_Multiply_float(IN.TimeParameters.x, _Property_52DC056C_Out_0, _Multiply_29661DD6_Out_2);
			float2 _TilingAndOffset_AC342860_Out_3;
			Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_29661DD6_Out_2.xx), _TilingAndOffset_AC342860_Out_3);
			float _Property_A82178B0_Out_0 = Vector1_160035B9;
			float _GradientNoise_49D66967_Out_2;
			Unity_GradientNoise_float(_TilingAndOffset_AC342860_Out_3, _Property_A82178B0_Out_0, _GradientNoise_49D66967_Out_2);
			float _Property_5C65111_Out_0 = Vector1_6FA2E258;
			float _Multiply_6686FA7E_Out_2;
			Unity_Multiply_float(_GradientNoise_49D66967_Out_2, _Property_5C65111_Out_0, _Multiply_6686FA7E_Out_2);
			float _Add_2A5A5D89_Out_2;
			Unity_Add_float(_Smoothstep_53A845F3_Out_3, _Multiply_6686FA7E_Out_2, _Add_2A5A5D89_Out_2);
			float _Add_4F1E7955_Out_2;
			Unity_Add_float(3, _Property_5C65111_Out_0, _Add_4F1E7955_Out_2);
			float _Divide_1D64A51E_Out_2;
			Unity_Divide_float(_Add_2A5A5D89_Out_2, _Add_4F1E7955_Out_2, _Divide_1D64A51E_Out_2);
			float4 _Lerp_CDFA72F8_Out_3;
			Unity_Lerp_float4(_Property_865DEE29_Out_0, _Property_F3C9D8B3_Out_0, (_Divide_1D64A51E_Out_2.xxxx), _Lerp_CDFA72F8_Out_3);
			float _Property_35DFD419_Out_0 = Vector1_118F9AE3;
			float _FresnelEffect_83B46249_Out_3;
			Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_35DFD419_Out_0, _FresnelEffect_83B46249_Out_3);
			float _Multiply_F334F639_Out_2;
			Unity_Multiply_float(_Divide_1D64A51E_Out_2, _FresnelEffect_83B46249_Out_3, _Multiply_F334F639_Out_2);
			float _Property_2492BFC2_Out_0 = Vector1_7DCA2CFD;
			float _Multiply_C0F0E976_Out_2;
			Unity_Multiply_float(_Multiply_F334F639_Out_2, _Property_2492BFC2_Out_0, _Multiply_C0F0E976_Out_2);
			float4 _Add_89A566DC_Out_2;
			Unity_Add_float4(_Lerp_CDFA72F8_Out_3, (_Multiply_C0F0E976_Out_2.xxxx), _Add_89A566DC_Out_2);
			float _SceneDepth_668E6505_Out_1;
			Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_668E6505_Out_1);
			float4 _ScreenPosition_7A918B87_Out_0 = float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0);
			float _Split_AD68455A_R_1 = _ScreenPosition_7A918B87_Out_0[0];
			float _Split_AD68455A_G_2 = _ScreenPosition_7A918B87_Out_0[1];
			float _Split_AD68455A_B_3 = _ScreenPosition_7A918B87_Out_0[2];
			float _Split_AD68455A_A_4 = _ScreenPosition_7A918B87_Out_0[3];
			float _Subtract_F47D7244_Out_2;
			Unity_Subtract_float(_Split_AD68455A_A_4, 1, _Subtract_F47D7244_Out_2);
			float _Subtract_8FC40A28_Out_2;
			Unity_Subtract_float(_SceneDepth_668E6505_Out_1, _Subtract_F47D7244_Out_2, _Subtract_8FC40A28_Out_2);
			float _Property_AE1CB25B_Out_0 = Vector1_7C6FDCBA;
			float _Divide_8BDAB4AF_Out_2;
			Unity_Divide_float(_Subtract_8FC40A28_Out_2, _Property_AE1CB25B_Out_0, _Divide_8BDAB4AF_Out_2);
			float _Saturate_B2153262_Out_1;
			Unity_Saturate_float(_Divide_8BDAB4AF_Out_2, _Saturate_B2153262_Out_1);
			surface.Albedo = (_Add_89A566DC_Out_2.xyz);
			surface.Normal = IN.TangentSpaceNormal;
			surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
			surface.Metallic = 0;
			surface.Smoothness = 0.5;
			surface.Occlusion = 1;
			surface.Alpha = _Saturate_B2153262_Out_1;
			surface.AlphaClipThreshold = 0.5;
			return surface;
		}

		struct GraphVertexInput
		{
			float4 vertex : POSITION;
			float3 normal : NORMAL;
			float4 tangent : TANGENT;
			float4 texcoord1 : TEXCOORD1;
			UNITY_VERTEX_INPUT_INSTANCE_ID
		};


		struct GraphVertexOutput
		{
			float4 clipPos                : SV_POSITION;
			DECLARE_LIGHTMAP_OR_SH(lightmapUV, vertexSH, 0);
			half4 fogFactorAndVertexLight : TEXCOORD1; // x: fogFactor, yzw: vertex light
			float4 shadowCoord            : TEXCOORD2;

			// Interpolators defined by graph
			float3 WorldSpacePosition : TEXCOORD3;
			float3 WorldSpaceNormal : TEXCOORD4;
			float3 WorldSpaceTangent : TEXCOORD5;
			float3 WorldSpaceBiTangent : TEXCOORD6;
			float3 WorldSpaceViewDirection : TEXCOORD7;
			float4 ScreenPosition : TEXCOORD8;
			half4 uv1 : TEXCOORD9;

			UNITY_VERTEX_INPUT_INSTANCE_ID
			UNITY_VERTEX_OUTPUT_STEREO
		};

		GraphVertexOutput vert(GraphVertexInput v)
		{
			GraphVertexOutput o = (GraphVertexOutput)0;
			UNITY_SETUP_INSTANCE_ID(v);
			UNITY_TRANSFER_INSTANCE_ID(v, o);
			UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

			// Vertex transformations performed by graph
			float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
			float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
			float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
			float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
			float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
			float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
			float4 uv1 = v.texcoord1;
			float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
			float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

			VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

			// Vertex description inputs defined by graph
			vdi.ObjectSpaceNormal = ObjectSpaceNormal;
			vdi.WorldSpaceNormal = WorldSpaceNormal;
			vdi.ObjectSpacePosition = ObjectSpacePosition;
			vdi.WorldSpacePosition = WorldSpacePosition;
			vdi.TimeParameters = _TimeParameters.xyz;

			VertexDescription vd = PopulateVertexData(vdi);
			v.vertex.xyz = vd.Position;

			// Vertex shader outputs defined by graph
			o.WorldSpacePosition = WorldSpacePosition;
			o.WorldSpaceNormal = WorldSpaceNormal;
			o.WorldSpaceTangent = WorldSpaceTangent;
			o.WorldSpaceBiTangent = WorldSpaceBiTangent;
			o.WorldSpaceViewDirection = WorldSpaceViewDirection;
			o.ScreenPosition = ScreenPosition;
			o.uv1 = uv1;

			float3 lwWNormal = TransformObjectToWorldNormal(v.normal);

			VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);

			// We either sample GI from lightmap or SH.
			// Lightmap UV and vertex SH coefficients use the same interpolator ("float2 lightmapUV" for lightmap or "half3 vertexSH" for SH)
			// see DECLARE_LIGHTMAP_OR_SH macro.
			// The following funcions initialize the correct variable with correct data
			OUTPUT_LIGHTMAP_UV(v.texcoord1, unity_LightmapST, o.lightmapUV);
			OUTPUT_SH(lwWNormal, o.vertexSH);

			half3 vertexLight = VertexLighting(vertexInput.positionWS, lwWNormal);
			half fogFactor = ComputeFogFactor(vertexInput.positionCS.z);
			o.fogFactorAndVertexLight = half4(fogFactor, vertexLight);
			o.clipPos = vertexInput.positionCS;

		#ifdef _MAIN_LIGHT_SHADOWS
			o.shadowCoord = GetShadowCoord(vertexInput);
		#endif
			return o;
		}

		half4 frag(GraphVertexOutput IN) : SV_Target
		{
			UNITY_SETUP_INSTANCE_ID(IN);
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

			// Pixel transformations performed by graph
			float3 WorldSpacePosition = IN.WorldSpacePosition;
			float3 WorldSpaceNormal = IN.WorldSpaceNormal;
			float3 WorldSpaceTangent = IN.WorldSpaceTangent;
			float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
			float4 ScreenPosition = IN.ScreenPosition;
			float4 uv1 = IN.uv1;
			float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

			SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

			// Surface description inputs defined by graph
			surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
			surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
			surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
			surfaceInput.WorldSpacePosition = WorldSpacePosition;
			surfaceInput.ScreenPosition = ScreenPosition;
			surfaceInput.TimeParameters = _TimeParameters.xyz;

			SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

			float3 Albedo = float3(0.5, 0.5, 0.5);
			float3 Specular = float3(0, 0, 0);
			float Metallic = 1;
			float3 Normal = float3(0, 0, 1);
			float3 Emission = 0;
			float Smoothness = 0.5;
			float Occlusion = 1;
			float Alpha = 1;
			float AlphaClipThreshold = 0;

			// Surface description remap performed by graph
			Albedo = surf.Albedo;
			Normal = surf.Normal;
			Emission = surf.Emission;
			Metallic = surf.Metallic;
			Smoothness = surf.Smoothness;
			Occlusion = surf.Occlusion;
			Alpha = surf.Alpha;
			AlphaClipThreshold = surf.AlphaClipThreshold;

			InputData inputData;
			inputData.positionWS = WorldSpacePosition;

	#ifdef _NORMALMAP
			inputData.normalWS = normalize(TransformTangentToWorld(Normal, half3x3(WorldSpaceTangent, WorldSpaceBiTangent, WorldSpaceNormal)));
	#else
		#if !SHADER_HINT_NICE_QUALITY
			inputData.normalWS = WorldSpaceNormal;
		#else
			inputData.normalWS = normalize(WorldSpaceNormal);
		#endif
	#endif

	#if !SHADER_HINT_NICE_QUALITY
			// viewDirection should be normalized here, but we avoid doing it as it's close enough and we save some ALU.
			inputData.viewDirectionWS = WorldSpaceViewDirection;
	#else
			inputData.viewDirectionWS = normalize(WorldSpaceViewDirection);
	#endif

			inputData.shadowCoord = IN.shadowCoord;

			inputData.fogCoord = IN.fogFactorAndVertexLight.x;
			inputData.vertexLighting = IN.fogFactorAndVertexLight.yzw;
			inputData.bakedGI = SAMPLE_GI(IN.lightmapUV, IN.vertexSH, inputData.normalWS);

			half4 color = LightweightFragmentPBR(
				inputData,
				Albedo,
				Metallic,
				Specular,
				Smoothness,
				Occlusion,
				Emission,
				Alpha);

			// Computes fog factor per-vertex
			color.rgb = MixFog(color.rgb, IN.fogFactorAndVertexLight.x);

	#if _AlphaClip
			clip(Alpha - AlphaClipThreshold);
	#endif
			return color;
		}

		ENDHLSL
	}
	Pass
	{
		Name "ShadowCaster"
		Tags{"LightMode" = "ShadowCaster"}

		ZWrite On ZTest LEqual

			// Material options generated by graph
			Cull Off

			HLSLPROGRAM
			// Required to compile gles 2.0 with standard srp library
			#pragma prefer_hlslcc gles
			#pragma exclude_renderers d3d11_9x
			#pragma target 2.0

			//--------------------------------------
			// GPU Instancing
			#pragma multi_compile_instancing

			#pragma vertex ShadowPassVertex
			#pragma fragment ShadowPassFragment

			// Defines generated by graph
			#define REQUIRE_DEPTH_TEXTURE

			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

			CBUFFER_START(UnityPerMaterial)
			float4 Vector4_58BB93F7;
			float Vector1_AF480FB0;
			float Vector1_6FC0738F;
			float4 Vector4_46291EA8;
			float Vector1_53879FF9;
			float4 Color_9CF0A665;
			float4 Color_761E3BF0;
			float Vector1_F326F04;
			float Vector1_5E914204;
			float Vector1_6EF1F52E;
			float Vector1_160035B9;
			float Vector1_767C2BCB;
			float Vector1_6FA2E258;
			float Vector1_CC7180D;
			float Vector1_118F9AE3;
			float Vector1_7DCA2CFD;
			float Vector1_7C6FDCBA;
			CBUFFER_END

			struct VertexDescriptionInputs
			{
				float3 ObjectSpaceNormal;
				float3 WorldSpaceNormal;
				float3 ObjectSpacePosition;
				float3 WorldSpacePosition;
				float3 TimeParameters;
			};

			struct SurfaceDescriptionInputs
			{
				float3 WorldSpaceNormal;
				float3 TangentSpaceNormal;
				float3 WorldSpaceViewDirection;
				float3 WorldSpacePosition;
				float4 ScreenPosition;
				float3 TimeParameters;
			};


			void Unity_Distance_float3(float3 A, float3 B, out float Out)
			{
				Out = distance(A, B);
			}

			void Unity_Divide_float(float A, float B, out float Out)
			{
				Out = A / B;
			}

			void Unity_Power_float(float A, float B, out float Out)
			{
				Out = pow(A, B);
			}

			void Unity_Multiply_float(float3 A, float3 B, out float3 Out)
			{
				Out = A * B;
			}

			void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
			{
				Rotation = radians(Rotation);

				float s = sin(Rotation);
				float c = cos(Rotation);
				float one_minus_c = 1.0 - c;

				Axis = normalize(Axis);

				float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
										  one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
										  one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
										};

				Out = mul(rot_mat,  In);
			}

			void Unity_Multiply_float(float A, float B, out float Out)
			{
				Out = A * B;
			}

			void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
			{
				Out = UV * Tiling + Offset;
			}


		float2 Unity_GradientNoise_Dir_float(float2 p)
		{
			// Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
			p = p % 289;
			float x = (34 * p.x + 1) * p.x % 289 + p.y;
			x = (34 * x + 1) * x % 289;
			x = frac(x / 41) * 2 - 1;
			return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
		}

			void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
			{
				float2 p = UV * Scale;
				float2 ip = floor(p);
				float2 fp = frac(p);
				float d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);
				float d01 = dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));
				float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1, 0));
				float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 1)), fp - float2(1, 1));
				fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
				Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
			}

			void Unity_Add_float(float A, float B, out float Out)
			{
				Out = A + B;
			}

			void Unity_Saturate_float(float In, out float Out)
			{
				Out = saturate(In);
			}

			void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
			{
				RGBA = float4(R, G, B, A);
				RGB = float3(R, G, B);
				RG = float2(R, G);
			}

			void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
			{
				Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
			}

			void Unity_Absolute_float(float In, out float Out)
			{
				Out = abs(In);
			}

			void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
			{
				Out = smoothstep(Edge1, Edge2, In);
			}

			void Unity_Add_float3(float3 A, float3 B, out float3 Out)
			{
				Out = A + B;
			}

			void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
			{
				Out = lerp(A, B, T);
			}

			void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
			{
				Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
			}

			void Unity_Add_float4(float4 A, float4 B, out float4 Out)
			{
				Out = A + B;
			}

			void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
			{
				Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
			}

			void Unity_Subtract_float(float A, float B, out float Out)
			{
				Out = A - B;
			}

			struct VertexDescription
			{
				float3 Position;
			};

			VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				float _Distance_66864F21_Out_2;
				Unity_Distance_float3(SHADERGRAPH_OBJECT_POSITION, IN.WorldSpacePosition, _Distance_66864F21_Out_2);
				float _Property_365F1C22_Out_0 = Vector1_CC7180D;
				float _Divide_8FA1BFAE_Out_2;
				Unity_Divide_float(_Distance_66864F21_Out_2, _Property_365F1C22_Out_0, _Divide_8FA1BFAE_Out_2);
				float _Power_7BCE79D6_Out_2;
				Unity_Power_float(_Divide_8FA1BFAE_Out_2, 2, _Power_7BCE79D6_Out_2);
				float3 _Multiply_FB340743_Out_2;
				Unity_Multiply_float(IN.WorldSpaceNormal, (_Power_7BCE79D6_Out_2.xxx), _Multiply_FB340743_Out_2);
				float _Property_CFE1ED94_Out_0 = Vector1_F326F04;
				float _Property_D9B2DDCA_Out_0 = Vector1_5E914204;
				float4 _Property_AA563FF5_Out_0 = Vector4_58BB93F7;
				float _Split_160A2DF8_R_1 = _Property_AA563FF5_Out_0[0];
				float _Split_160A2DF8_G_2 = _Property_AA563FF5_Out_0[1];
				float _Split_160A2DF8_B_3 = _Property_AA563FF5_Out_0[2];
				float _Split_160A2DF8_A_4 = _Property_AA563FF5_Out_0[3];
				float3 _RotateAboutAxis_5F14F802_Out_3;
				Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_AA563FF5_Out_0.xyz), _Split_160A2DF8_A_4, _RotateAboutAxis_5F14F802_Out_3);
				float _Property_A6C59C8E_Out_0 = Vector1_6FC0738F;
				float _Multiply_A0E0F4C7_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_A6C59C8E_Out_0, _Multiply_A0E0F4C7_Out_2);
				float2 _TilingAndOffset_A4D1A3ED_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_A0E0F4C7_Out_2.xx), _TilingAndOffset_A4D1A3ED_Out_3);
				float _Property_B4B4E9CF_Out_0 = Vector1_AF480FB0;
				float _GradientNoise_A0D3B5C3_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_A4D1A3ED_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_A0D3B5C3_Out_2);
				float2 _TilingAndOffset_1E5A0899_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_1E5A0899_Out_3);
				float _GradientNoise_CE0772DA_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_1E5A0899_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_CE0772DA_Out_2);
				float _Add_D140788A_Out_2;
				Unity_Add_float(_GradientNoise_A0D3B5C3_Out_2, _GradientNoise_CE0772DA_Out_2, _Add_D140788A_Out_2);
				float _Divide_431432EB_Out_2;
				Unity_Divide_float(_Add_D140788A_Out_2, 2, _Divide_431432EB_Out_2);
				float _Saturate_3045B206_Out_1;
				Unity_Saturate_float(_Divide_431432EB_Out_2, _Saturate_3045B206_Out_1);
				float _Property_4A5644FC_Out_0 = Vector1_6EF1F52E;
				float _Power_9FF66C0B_Out_2;
				Unity_Power_float(_Saturate_3045B206_Out_1, _Property_4A5644FC_Out_0, _Power_9FF66C0B_Out_2);
				float4 _Property_C94C128A_Out_0 = Vector4_46291EA8;
				float _Split_23A88146_R_1 = _Property_C94C128A_Out_0[0];
				float _Split_23A88146_G_2 = _Property_C94C128A_Out_0[1];
				float _Split_23A88146_B_3 = _Property_C94C128A_Out_0[2];
				float _Split_23A88146_A_4 = _Property_C94C128A_Out_0[3];
				float4 _Combine_1590CA62_RGBA_4;
				float3 _Combine_1590CA62_RGB_5;
				float2 _Combine_1590CA62_RG_6;
				Unity_Combine_float(_Split_23A88146_R_1, _Split_23A88146_G_2, 0, 0, _Combine_1590CA62_RGBA_4, _Combine_1590CA62_RGB_5, _Combine_1590CA62_RG_6);
				float4 _Combine_818D0AEF_RGBA_4;
				float3 _Combine_818D0AEF_RGB_5;
				float2 _Combine_818D0AEF_RG_6;
				Unity_Combine_float(_Split_23A88146_B_3, _Split_23A88146_A_4, 0, 0, _Combine_818D0AEF_RGBA_4, _Combine_818D0AEF_RGB_5, _Combine_818D0AEF_RG_6);
				float _Remap_E8E080A5_Out_3;
				Unity_Remap_float(_Power_9FF66C0B_Out_2, _Combine_1590CA62_RG_6, _Combine_818D0AEF_RG_6, _Remap_E8E080A5_Out_3);
				float _Absolute_10AFA310_Out_1;
				Unity_Absolute_float(_Remap_E8E080A5_Out_3, _Absolute_10AFA310_Out_1);
				float _Smoothstep_53A845F3_Out_3;
				Unity_Smoothstep_float(_Property_CFE1ED94_Out_0, _Property_D9B2DDCA_Out_0, _Absolute_10AFA310_Out_1, _Smoothstep_53A845F3_Out_3);
				float _Property_52DC056C_Out_0 = Vector1_767C2BCB;
				float _Multiply_29661DD6_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_52DC056C_Out_0, _Multiply_29661DD6_Out_2);
				float2 _TilingAndOffset_AC342860_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_29661DD6_Out_2.xx), _TilingAndOffset_AC342860_Out_3);
				float _Property_A82178B0_Out_0 = Vector1_160035B9;
				float _GradientNoise_49D66967_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_AC342860_Out_3, _Property_A82178B0_Out_0, _GradientNoise_49D66967_Out_2);
				float _Property_5C65111_Out_0 = Vector1_6FA2E258;
				float _Multiply_6686FA7E_Out_2;
				Unity_Multiply_float(_GradientNoise_49D66967_Out_2, _Property_5C65111_Out_0, _Multiply_6686FA7E_Out_2);
				float _Add_2A5A5D89_Out_2;
				Unity_Add_float(_Smoothstep_53A845F3_Out_3, _Multiply_6686FA7E_Out_2, _Add_2A5A5D89_Out_2);
				float _Add_4F1E7955_Out_2;
				Unity_Add_float(3, _Property_5C65111_Out_0, _Add_4F1E7955_Out_2);
				float _Divide_1D64A51E_Out_2;
				Unity_Divide_float(_Add_2A5A5D89_Out_2, _Add_4F1E7955_Out_2, _Divide_1D64A51E_Out_2);
				float3 _Multiply_EA80A68F_Out_2;
				Unity_Multiply_float(IN.ObjectSpaceNormal, (_Divide_1D64A51E_Out_2.xxx), _Multiply_EA80A68F_Out_2);
				float _Property_AD66F131_Out_0 = Vector1_53879FF9;
				float3 _Multiply_2BAF07B0_Out_2;
				Unity_Multiply_float(_Multiply_EA80A68F_Out_2, (_Property_AD66F131_Out_0.xxx), _Multiply_2BAF07B0_Out_2);
				float3 _Add_D5BE1A59_Out_2;
				Unity_Add_float3(IN.ObjectSpacePosition, _Multiply_2BAF07B0_Out_2, _Add_D5BE1A59_Out_2);
				float3 _Add_91EF4868_Out_2;
				Unity_Add_float3(_Multiply_FB340743_Out_2, _Add_D5BE1A59_Out_2, _Add_91EF4868_Out_2);
				description.Position = _Add_91EF4868_Out_2;
				return description;
			}

			struct SurfaceDescription
			{
				float3 Albedo;
				float3 Emission;
				float Alpha;
				float AlphaClipThreshold;
			};

			SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				float4 _Property_865DEE29_Out_0 = Color_9CF0A665;
				float4 _Property_F3C9D8B3_Out_0 = Color_761E3BF0;
				float _Property_CFE1ED94_Out_0 = Vector1_F326F04;
				float _Property_D9B2DDCA_Out_0 = Vector1_5E914204;
				float4 _Property_AA563FF5_Out_0 = Vector4_58BB93F7;
				float _Split_160A2DF8_R_1 = _Property_AA563FF5_Out_0[0];
				float _Split_160A2DF8_G_2 = _Property_AA563FF5_Out_0[1];
				float _Split_160A2DF8_B_3 = _Property_AA563FF5_Out_0[2];
				float _Split_160A2DF8_A_4 = _Property_AA563FF5_Out_0[3];
				float3 _RotateAboutAxis_5F14F802_Out_3;
				Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_AA563FF5_Out_0.xyz), _Split_160A2DF8_A_4, _RotateAboutAxis_5F14F802_Out_3);
				float _Property_A6C59C8E_Out_0 = Vector1_6FC0738F;
				float _Multiply_A0E0F4C7_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_A6C59C8E_Out_0, _Multiply_A0E0F4C7_Out_2);
				float2 _TilingAndOffset_A4D1A3ED_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_A0E0F4C7_Out_2.xx), _TilingAndOffset_A4D1A3ED_Out_3);
				float _Property_B4B4E9CF_Out_0 = Vector1_AF480FB0;
				float _GradientNoise_A0D3B5C3_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_A4D1A3ED_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_A0D3B5C3_Out_2);
				float2 _TilingAndOffset_1E5A0899_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_1E5A0899_Out_3);
				float _GradientNoise_CE0772DA_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_1E5A0899_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_CE0772DA_Out_2);
				float _Add_D140788A_Out_2;
				Unity_Add_float(_GradientNoise_A0D3B5C3_Out_2, _GradientNoise_CE0772DA_Out_2, _Add_D140788A_Out_2);
				float _Divide_431432EB_Out_2;
				Unity_Divide_float(_Add_D140788A_Out_2, 2, _Divide_431432EB_Out_2);
				float _Saturate_3045B206_Out_1;
				Unity_Saturate_float(_Divide_431432EB_Out_2, _Saturate_3045B206_Out_1);
				float _Property_4A5644FC_Out_0 = Vector1_6EF1F52E;
				float _Power_9FF66C0B_Out_2;
				Unity_Power_float(_Saturate_3045B206_Out_1, _Property_4A5644FC_Out_0, _Power_9FF66C0B_Out_2);
				float4 _Property_C94C128A_Out_0 = Vector4_46291EA8;
				float _Split_23A88146_R_1 = _Property_C94C128A_Out_0[0];
				float _Split_23A88146_G_2 = _Property_C94C128A_Out_0[1];
				float _Split_23A88146_B_3 = _Property_C94C128A_Out_0[2];
				float _Split_23A88146_A_4 = _Property_C94C128A_Out_0[3];
				float4 _Combine_1590CA62_RGBA_4;
				float3 _Combine_1590CA62_RGB_5;
				float2 _Combine_1590CA62_RG_6;
				Unity_Combine_float(_Split_23A88146_R_1, _Split_23A88146_G_2, 0, 0, _Combine_1590CA62_RGBA_4, _Combine_1590CA62_RGB_5, _Combine_1590CA62_RG_6);
				float4 _Combine_818D0AEF_RGBA_4;
				float3 _Combine_818D0AEF_RGB_5;
				float2 _Combine_818D0AEF_RG_6;
				Unity_Combine_float(_Split_23A88146_B_3, _Split_23A88146_A_4, 0, 0, _Combine_818D0AEF_RGBA_4, _Combine_818D0AEF_RGB_5, _Combine_818D0AEF_RG_6);
				float _Remap_E8E080A5_Out_3;
				Unity_Remap_float(_Power_9FF66C0B_Out_2, _Combine_1590CA62_RG_6, _Combine_818D0AEF_RG_6, _Remap_E8E080A5_Out_3);
				float _Absolute_10AFA310_Out_1;
				Unity_Absolute_float(_Remap_E8E080A5_Out_3, _Absolute_10AFA310_Out_1);
				float _Smoothstep_53A845F3_Out_3;
				Unity_Smoothstep_float(_Property_CFE1ED94_Out_0, _Property_D9B2DDCA_Out_0, _Absolute_10AFA310_Out_1, _Smoothstep_53A845F3_Out_3);
				float _Property_52DC056C_Out_0 = Vector1_767C2BCB;
				float _Multiply_29661DD6_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_52DC056C_Out_0, _Multiply_29661DD6_Out_2);
				float2 _TilingAndOffset_AC342860_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_29661DD6_Out_2.xx), _TilingAndOffset_AC342860_Out_3);
				float _Property_A82178B0_Out_0 = Vector1_160035B9;
				float _GradientNoise_49D66967_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_AC342860_Out_3, _Property_A82178B0_Out_0, _GradientNoise_49D66967_Out_2);
				float _Property_5C65111_Out_0 = Vector1_6FA2E258;
				float _Multiply_6686FA7E_Out_2;
				Unity_Multiply_float(_GradientNoise_49D66967_Out_2, _Property_5C65111_Out_0, _Multiply_6686FA7E_Out_2);
				float _Add_2A5A5D89_Out_2;
				Unity_Add_float(_Smoothstep_53A845F3_Out_3, _Multiply_6686FA7E_Out_2, _Add_2A5A5D89_Out_2);
				float _Add_4F1E7955_Out_2;
				Unity_Add_float(3, _Property_5C65111_Out_0, _Add_4F1E7955_Out_2);
				float _Divide_1D64A51E_Out_2;
				Unity_Divide_float(_Add_2A5A5D89_Out_2, _Add_4F1E7955_Out_2, _Divide_1D64A51E_Out_2);
				float4 _Lerp_CDFA72F8_Out_3;
				Unity_Lerp_float4(_Property_865DEE29_Out_0, _Property_F3C9D8B3_Out_0, (_Divide_1D64A51E_Out_2.xxxx), _Lerp_CDFA72F8_Out_3);
				float _Property_35DFD419_Out_0 = Vector1_118F9AE3;
				float _FresnelEffect_83B46249_Out_3;
				Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_35DFD419_Out_0, _FresnelEffect_83B46249_Out_3);
				float _Multiply_F334F639_Out_2;
				Unity_Multiply_float(_Divide_1D64A51E_Out_2, _FresnelEffect_83B46249_Out_3, _Multiply_F334F639_Out_2);
				float _Property_2492BFC2_Out_0 = Vector1_7DCA2CFD;
				float _Multiply_C0F0E976_Out_2;
				Unity_Multiply_float(_Multiply_F334F639_Out_2, _Property_2492BFC2_Out_0, _Multiply_C0F0E976_Out_2);
				float4 _Add_89A566DC_Out_2;
				Unity_Add_float4(_Lerp_CDFA72F8_Out_3, (_Multiply_C0F0E976_Out_2.xxxx), _Add_89A566DC_Out_2);
				float _SceneDepth_668E6505_Out_1;
				Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_668E6505_Out_1);
				float4 _ScreenPosition_7A918B87_Out_0 = float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0);
				float _Split_AD68455A_R_1 = _ScreenPosition_7A918B87_Out_0[0];
				float _Split_AD68455A_G_2 = _ScreenPosition_7A918B87_Out_0[1];
				float _Split_AD68455A_B_3 = _ScreenPosition_7A918B87_Out_0[2];
				float _Split_AD68455A_A_4 = _ScreenPosition_7A918B87_Out_0[3];
				float _Subtract_F47D7244_Out_2;
				Unity_Subtract_float(_Split_AD68455A_A_4, 1, _Subtract_F47D7244_Out_2);
				float _Subtract_8FC40A28_Out_2;
				Unity_Subtract_float(_SceneDepth_668E6505_Out_1, _Subtract_F47D7244_Out_2, _Subtract_8FC40A28_Out_2);
				float _Property_AE1CB25B_Out_0 = Vector1_7C6FDCBA;
				float _Divide_8BDAB4AF_Out_2;
				Unity_Divide_float(_Subtract_8FC40A28_Out_2, _Property_AE1CB25B_Out_0, _Divide_8BDAB4AF_Out_2);
				float _Saturate_B2153262_Out_1;
				Unity_Saturate_float(_Divide_8BDAB4AF_Out_2, _Saturate_B2153262_Out_1);
				surface.Albedo = (_Add_89A566DC_Out_2.xyz);
				surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
				surface.Alpha = _Saturate_B2153262_Out_1;
				surface.AlphaClipThreshold = 0.5;
				return surface;
			}

			struct GraphVertexInput
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 tangent : TANGENT;
				float4 texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};


			struct VertexOutput
			{
				float2 uv           : TEXCOORD0;
				float4 clipPos      : SV_POSITION;
				// Interpolators defined by graph
				float3 WorldSpacePosition : TEXCOORD3;
				float3 WorldSpaceNormal : TEXCOORD4;
				float3 WorldSpaceTangent : TEXCOORD5;
				float3 WorldSpaceBiTangent : TEXCOORD6;
				float3 WorldSpaceViewDirection : TEXCOORD7;
				float4 ScreenPosition : TEXCOORD8;
				half4 uv1 : TEXCOORD9;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			float3 _LightDirection;

			VertexOutput ShadowPassVertex(GraphVertexInput v)
			{
				VertexOutput o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);

				// Vertex transformations performed by graph
				float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
				float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
				float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
				float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
				float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
				float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
				float4 uv1 = v.texcoord1;
				float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
				float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

				VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

				// Vertex description inputs defined by graph
				vdi.ObjectSpaceNormal = ObjectSpaceNormal;
				vdi.WorldSpaceNormal = WorldSpaceNormal;
				vdi.ObjectSpacePosition = ObjectSpacePosition;
				vdi.WorldSpacePosition = WorldSpacePosition;
				vdi.TimeParameters = _TimeParameters.xyz;

				VertexDescription vd = PopulateVertexData(vdi);
				v.vertex.xyz = vd.Position;

				// Vertex shader outputs defined by graph
				o.WorldSpacePosition = WorldSpacePosition;
				o.WorldSpaceNormal = WorldSpaceNormal;
				o.WorldSpaceTangent = WorldSpaceTangent;
				o.WorldSpaceBiTangent = WorldSpaceBiTangent;
				o.WorldSpaceViewDirection = WorldSpaceViewDirection;
				o.ScreenPosition = ScreenPosition;
				o.uv1 = uv1;


				float3 positionWS = TransformObjectToWorld(v.vertex.xyz);
				float3 normalWS = TransformObjectToWorldNormal(v.normal);

				float4 clipPos = TransformWorldToHClip(ApplyShadowBias(positionWS, normalWS, _LightDirection));

			#if UNITY_REVERSED_Z
				clipPos.z = min(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
			#else
				clipPos.z = max(clipPos.z, clipPos.w * UNITY_NEAR_CLIP_VALUE);
			#endif
				o.clipPos = clipPos;

				return o;
			}

			half4 ShadowPassFragment(VertexOutput IN) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID(IN);

			// Pixel transformations performed by graph
			float3 WorldSpacePosition = IN.WorldSpacePosition;
			float3 WorldSpaceNormal = IN.WorldSpaceNormal;
			float3 WorldSpaceTangent = IN.WorldSpaceTangent;
			float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
			float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
			float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
			float4 ScreenPosition = IN.ScreenPosition;
			float4 uv1 = IN.uv1;
			float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

			SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

			// Surface description inputs defined by graph
			surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
			surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
			surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
			surfaceInput.WorldSpacePosition = WorldSpacePosition;
			surfaceInput.ScreenPosition = ScreenPosition;
			surfaceInput.TimeParameters = _TimeParameters.xyz;

			SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

			float3 Albedo = float3(0.5, 0.5, 0.5);
			float3 Emission = 0;
			float Alpha = 1;
			float AlphaClipThreshold = 0;

			// Surface description remap performed by graph
			Albedo = surf.Albedo;
			Emission = surf.Emission;
			Alpha = surf.Alpha;
			AlphaClipThreshold = surf.AlphaClipThreshold;

	 #if _AlphaClip
			clip(Alpha - AlphaClipThreshold);
	#endif
			return 0;
		}

		ENDHLSL
	}

	Pass
	{
		Name "DepthOnly"
		Tags{"LightMode" = "DepthOnly"}

		ZWrite On
		ColorMask 0

			// Material options generated by graph
			Cull Off

			HLSLPROGRAM
			// Required to compile gles 2.0 with standard srp library
			#pragma prefer_hlslcc gles
			#pragma exclude_renderers d3d11_9x
			#pragma target 2.0

			//--------------------------------------
			// GPU Instancing
			#pragma multi_compile_instancing

			#pragma vertex vert
			#pragma fragment frag

			// Defines generated by graph
			#define REQUIRE_DEPTH_TEXTURE

			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

			CBUFFER_START(UnityPerMaterial)
			float4 Vector4_58BB93F7;
			float Vector1_AF480FB0;
			float Vector1_6FC0738F;
			float4 Vector4_46291EA8;
			float Vector1_53879FF9;
			float4 Color_9CF0A665;
			float4 Color_761E3BF0;
			float Vector1_F326F04;
			float Vector1_5E914204;
			float Vector1_6EF1F52E;
			float Vector1_160035B9;
			float Vector1_767C2BCB;
			float Vector1_6FA2E258;
			float Vector1_CC7180D;
			float Vector1_118F9AE3;
			float Vector1_7DCA2CFD;
			float Vector1_7C6FDCBA;
			CBUFFER_END

			struct VertexDescriptionInputs
			{
				float3 ObjectSpaceNormal;
				float3 WorldSpaceNormal;
				float3 ObjectSpacePosition;
				float3 WorldSpacePosition;
				float3 TimeParameters;
			};

			struct SurfaceDescriptionInputs
			{
				float3 WorldSpaceNormal;
				float3 TangentSpaceNormal;
				float3 WorldSpaceViewDirection;
				float3 WorldSpacePosition;
				float4 ScreenPosition;
				float3 TimeParameters;
			};


			void Unity_Distance_float3(float3 A, float3 B, out float Out)
			{
				Out = distance(A, B);
			}

			void Unity_Divide_float(float A, float B, out float Out)
			{
				Out = A / B;
			}

			void Unity_Power_float(float A, float B, out float Out)
			{
				Out = pow(A, B);
			}

			void Unity_Multiply_float(float3 A, float3 B, out float3 Out)
			{
				Out = A * B;
			}

			void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
			{
				Rotation = radians(Rotation);

				float s = sin(Rotation);
				float c = cos(Rotation);
				float one_minus_c = 1.0 - c;

				Axis = normalize(Axis);

				float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
										  one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
										  one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
										};

				Out = mul(rot_mat,  In);
			}

			void Unity_Multiply_float(float A, float B, out float Out)
			{
				Out = A * B;
			}

			void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
			{
				Out = UV * Tiling + Offset;
			}


		float2 Unity_GradientNoise_Dir_float(float2 p)
		{
			// Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
			p = p % 289;
			float x = (34 * p.x + 1) * p.x % 289 + p.y;
			x = (34 * x + 1) * x % 289;
			x = frac(x / 41) * 2 - 1;
			return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
		}

			void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
			{
				float2 p = UV * Scale;
				float2 ip = floor(p);
				float2 fp = frac(p);
				float d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);
				float d01 = dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));
				float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1, 0));
				float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 1)), fp - float2(1, 1));
				fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
				Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
			}

			void Unity_Add_float(float A, float B, out float Out)
			{
				Out = A + B;
			}

			void Unity_Saturate_float(float In, out float Out)
			{
				Out = saturate(In);
			}

			void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
			{
				RGBA = float4(R, G, B, A);
				RGB = float3(R, G, B);
				RG = float2(R, G);
			}

			void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
			{
				Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
			}

			void Unity_Absolute_float(float In, out float Out)
			{
				Out = abs(In);
			}

			void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
			{
				Out = smoothstep(Edge1, Edge2, In);
			}

			void Unity_Add_float3(float3 A, float3 B, out float3 Out)
			{
				Out = A + B;
			}

			void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
			{
				Out = lerp(A, B, T);
			}

			void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
			{
				Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
			}

			void Unity_Add_float4(float4 A, float4 B, out float4 Out)
			{
				Out = A + B;
			}

			void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
			{
				Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
			}

			void Unity_Subtract_float(float A, float B, out float Out)
			{
				Out = A - B;
			}

			struct VertexDescription
			{
				float3 Position;
			};

			VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				float _Distance_66864F21_Out_2;
				Unity_Distance_float3(SHADERGRAPH_OBJECT_POSITION, IN.WorldSpacePosition, _Distance_66864F21_Out_2);
				float _Property_365F1C22_Out_0 = Vector1_CC7180D;
				float _Divide_8FA1BFAE_Out_2;
				Unity_Divide_float(_Distance_66864F21_Out_2, _Property_365F1C22_Out_0, _Divide_8FA1BFAE_Out_2);
				float _Power_7BCE79D6_Out_2;
				Unity_Power_float(_Divide_8FA1BFAE_Out_2, 2, _Power_7BCE79D6_Out_2);
				float3 _Multiply_FB340743_Out_2;
				Unity_Multiply_float(IN.WorldSpaceNormal, (_Power_7BCE79D6_Out_2.xxx), _Multiply_FB340743_Out_2);
				float _Property_CFE1ED94_Out_0 = Vector1_F326F04;
				float _Property_D9B2DDCA_Out_0 = Vector1_5E914204;
				float4 _Property_AA563FF5_Out_0 = Vector4_58BB93F7;
				float _Split_160A2DF8_R_1 = _Property_AA563FF5_Out_0[0];
				float _Split_160A2DF8_G_2 = _Property_AA563FF5_Out_0[1];
				float _Split_160A2DF8_B_3 = _Property_AA563FF5_Out_0[2];
				float _Split_160A2DF8_A_4 = _Property_AA563FF5_Out_0[3];
				float3 _RotateAboutAxis_5F14F802_Out_3;
				Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_AA563FF5_Out_0.xyz), _Split_160A2DF8_A_4, _RotateAboutAxis_5F14F802_Out_3);
				float _Property_A6C59C8E_Out_0 = Vector1_6FC0738F;
				float _Multiply_A0E0F4C7_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_A6C59C8E_Out_0, _Multiply_A0E0F4C7_Out_2);
				float2 _TilingAndOffset_A4D1A3ED_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_A0E0F4C7_Out_2.xx), _TilingAndOffset_A4D1A3ED_Out_3);
				float _Property_B4B4E9CF_Out_0 = Vector1_AF480FB0;
				float _GradientNoise_A0D3B5C3_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_A4D1A3ED_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_A0D3B5C3_Out_2);
				float2 _TilingAndOffset_1E5A0899_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_1E5A0899_Out_3);
				float _GradientNoise_CE0772DA_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_1E5A0899_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_CE0772DA_Out_2);
				float _Add_D140788A_Out_2;
				Unity_Add_float(_GradientNoise_A0D3B5C3_Out_2, _GradientNoise_CE0772DA_Out_2, _Add_D140788A_Out_2);
				float _Divide_431432EB_Out_2;
				Unity_Divide_float(_Add_D140788A_Out_2, 2, _Divide_431432EB_Out_2);
				float _Saturate_3045B206_Out_1;
				Unity_Saturate_float(_Divide_431432EB_Out_2, _Saturate_3045B206_Out_1);
				float _Property_4A5644FC_Out_0 = Vector1_6EF1F52E;
				float _Power_9FF66C0B_Out_2;
				Unity_Power_float(_Saturate_3045B206_Out_1, _Property_4A5644FC_Out_0, _Power_9FF66C0B_Out_2);
				float4 _Property_C94C128A_Out_0 = Vector4_46291EA8;
				float _Split_23A88146_R_1 = _Property_C94C128A_Out_0[0];
				float _Split_23A88146_G_2 = _Property_C94C128A_Out_0[1];
				float _Split_23A88146_B_3 = _Property_C94C128A_Out_0[2];
				float _Split_23A88146_A_4 = _Property_C94C128A_Out_0[3];
				float4 _Combine_1590CA62_RGBA_4;
				float3 _Combine_1590CA62_RGB_5;
				float2 _Combine_1590CA62_RG_6;
				Unity_Combine_float(_Split_23A88146_R_1, _Split_23A88146_G_2, 0, 0, _Combine_1590CA62_RGBA_4, _Combine_1590CA62_RGB_5, _Combine_1590CA62_RG_6);
				float4 _Combine_818D0AEF_RGBA_4;
				float3 _Combine_818D0AEF_RGB_5;
				float2 _Combine_818D0AEF_RG_6;
				Unity_Combine_float(_Split_23A88146_B_3, _Split_23A88146_A_4, 0, 0, _Combine_818D0AEF_RGBA_4, _Combine_818D0AEF_RGB_5, _Combine_818D0AEF_RG_6);
				float _Remap_E8E080A5_Out_3;
				Unity_Remap_float(_Power_9FF66C0B_Out_2, _Combine_1590CA62_RG_6, _Combine_818D0AEF_RG_6, _Remap_E8E080A5_Out_3);
				float _Absolute_10AFA310_Out_1;
				Unity_Absolute_float(_Remap_E8E080A5_Out_3, _Absolute_10AFA310_Out_1);
				float _Smoothstep_53A845F3_Out_3;
				Unity_Smoothstep_float(_Property_CFE1ED94_Out_0, _Property_D9B2DDCA_Out_0, _Absolute_10AFA310_Out_1, _Smoothstep_53A845F3_Out_3);
				float _Property_52DC056C_Out_0 = Vector1_767C2BCB;
				float _Multiply_29661DD6_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_52DC056C_Out_0, _Multiply_29661DD6_Out_2);
				float2 _TilingAndOffset_AC342860_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_29661DD6_Out_2.xx), _TilingAndOffset_AC342860_Out_3);
				float _Property_A82178B0_Out_0 = Vector1_160035B9;
				float _GradientNoise_49D66967_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_AC342860_Out_3, _Property_A82178B0_Out_0, _GradientNoise_49D66967_Out_2);
				float _Property_5C65111_Out_0 = Vector1_6FA2E258;
				float _Multiply_6686FA7E_Out_2;
				Unity_Multiply_float(_GradientNoise_49D66967_Out_2, _Property_5C65111_Out_0, _Multiply_6686FA7E_Out_2);
				float _Add_2A5A5D89_Out_2;
				Unity_Add_float(_Smoothstep_53A845F3_Out_3, _Multiply_6686FA7E_Out_2, _Add_2A5A5D89_Out_2);
				float _Add_4F1E7955_Out_2;
				Unity_Add_float(3, _Property_5C65111_Out_0, _Add_4F1E7955_Out_2);
				float _Divide_1D64A51E_Out_2;
				Unity_Divide_float(_Add_2A5A5D89_Out_2, _Add_4F1E7955_Out_2, _Divide_1D64A51E_Out_2);
				float3 _Multiply_EA80A68F_Out_2;
				Unity_Multiply_float(IN.ObjectSpaceNormal, (_Divide_1D64A51E_Out_2.xxx), _Multiply_EA80A68F_Out_2);
				float _Property_AD66F131_Out_0 = Vector1_53879FF9;
				float3 _Multiply_2BAF07B0_Out_2;
				Unity_Multiply_float(_Multiply_EA80A68F_Out_2, (_Property_AD66F131_Out_0.xxx), _Multiply_2BAF07B0_Out_2);
				float3 _Add_D5BE1A59_Out_2;
				Unity_Add_float3(IN.ObjectSpacePosition, _Multiply_2BAF07B0_Out_2, _Add_D5BE1A59_Out_2);
				float3 _Add_91EF4868_Out_2;
				Unity_Add_float3(_Multiply_FB340743_Out_2, _Add_D5BE1A59_Out_2, _Add_91EF4868_Out_2);
				description.Position = _Add_91EF4868_Out_2;
				return description;
			}

			struct SurfaceDescription
			{
				float3 Albedo;
				float3 Emission;
				float Alpha;
				float AlphaClipThreshold;
			};

			SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				float4 _Property_865DEE29_Out_0 = Color_9CF0A665;
				float4 _Property_F3C9D8B3_Out_0 = Color_761E3BF0;
				float _Property_CFE1ED94_Out_0 = Vector1_F326F04;
				float _Property_D9B2DDCA_Out_0 = Vector1_5E914204;
				float4 _Property_AA563FF5_Out_0 = Vector4_58BB93F7;
				float _Split_160A2DF8_R_1 = _Property_AA563FF5_Out_0[0];
				float _Split_160A2DF8_G_2 = _Property_AA563FF5_Out_0[1];
				float _Split_160A2DF8_B_3 = _Property_AA563FF5_Out_0[2];
				float _Split_160A2DF8_A_4 = _Property_AA563FF5_Out_0[3];
				float3 _RotateAboutAxis_5F14F802_Out_3;
				Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_AA563FF5_Out_0.xyz), _Split_160A2DF8_A_4, _RotateAboutAxis_5F14F802_Out_3);
				float _Property_A6C59C8E_Out_0 = Vector1_6FC0738F;
				float _Multiply_A0E0F4C7_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_A6C59C8E_Out_0, _Multiply_A0E0F4C7_Out_2);
				float2 _TilingAndOffset_A4D1A3ED_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_A0E0F4C7_Out_2.xx), _TilingAndOffset_A4D1A3ED_Out_3);
				float _Property_B4B4E9CF_Out_0 = Vector1_AF480FB0;
				float _GradientNoise_A0D3B5C3_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_A4D1A3ED_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_A0D3B5C3_Out_2);
				float2 _TilingAndOffset_1E5A0899_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_1E5A0899_Out_3);
				float _GradientNoise_CE0772DA_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_1E5A0899_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_CE0772DA_Out_2);
				float _Add_D140788A_Out_2;
				Unity_Add_float(_GradientNoise_A0D3B5C3_Out_2, _GradientNoise_CE0772DA_Out_2, _Add_D140788A_Out_2);
				float _Divide_431432EB_Out_2;
				Unity_Divide_float(_Add_D140788A_Out_2, 2, _Divide_431432EB_Out_2);
				float _Saturate_3045B206_Out_1;
				Unity_Saturate_float(_Divide_431432EB_Out_2, _Saturate_3045B206_Out_1);
				float _Property_4A5644FC_Out_0 = Vector1_6EF1F52E;
				float _Power_9FF66C0B_Out_2;
				Unity_Power_float(_Saturate_3045B206_Out_1, _Property_4A5644FC_Out_0, _Power_9FF66C0B_Out_2);
				float4 _Property_C94C128A_Out_0 = Vector4_46291EA8;
				float _Split_23A88146_R_1 = _Property_C94C128A_Out_0[0];
				float _Split_23A88146_G_2 = _Property_C94C128A_Out_0[1];
				float _Split_23A88146_B_3 = _Property_C94C128A_Out_0[2];
				float _Split_23A88146_A_4 = _Property_C94C128A_Out_0[3];
				float4 _Combine_1590CA62_RGBA_4;
				float3 _Combine_1590CA62_RGB_5;
				float2 _Combine_1590CA62_RG_6;
				Unity_Combine_float(_Split_23A88146_R_1, _Split_23A88146_G_2, 0, 0, _Combine_1590CA62_RGBA_4, _Combine_1590CA62_RGB_5, _Combine_1590CA62_RG_6);
				float4 _Combine_818D0AEF_RGBA_4;
				float3 _Combine_818D0AEF_RGB_5;
				float2 _Combine_818D0AEF_RG_6;
				Unity_Combine_float(_Split_23A88146_B_3, _Split_23A88146_A_4, 0, 0, _Combine_818D0AEF_RGBA_4, _Combine_818D0AEF_RGB_5, _Combine_818D0AEF_RG_6);
				float _Remap_E8E080A5_Out_3;
				Unity_Remap_float(_Power_9FF66C0B_Out_2, _Combine_1590CA62_RG_6, _Combine_818D0AEF_RG_6, _Remap_E8E080A5_Out_3);
				float _Absolute_10AFA310_Out_1;
				Unity_Absolute_float(_Remap_E8E080A5_Out_3, _Absolute_10AFA310_Out_1);
				float _Smoothstep_53A845F3_Out_3;
				Unity_Smoothstep_float(_Property_CFE1ED94_Out_0, _Property_D9B2DDCA_Out_0, _Absolute_10AFA310_Out_1, _Smoothstep_53A845F3_Out_3);
				float _Property_52DC056C_Out_0 = Vector1_767C2BCB;
				float _Multiply_29661DD6_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_52DC056C_Out_0, _Multiply_29661DD6_Out_2);
				float2 _TilingAndOffset_AC342860_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_29661DD6_Out_2.xx), _TilingAndOffset_AC342860_Out_3);
				float _Property_A82178B0_Out_0 = Vector1_160035B9;
				float _GradientNoise_49D66967_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_AC342860_Out_3, _Property_A82178B0_Out_0, _GradientNoise_49D66967_Out_2);
				float _Property_5C65111_Out_0 = Vector1_6FA2E258;
				float _Multiply_6686FA7E_Out_2;
				Unity_Multiply_float(_GradientNoise_49D66967_Out_2, _Property_5C65111_Out_0, _Multiply_6686FA7E_Out_2);
				float _Add_2A5A5D89_Out_2;
				Unity_Add_float(_Smoothstep_53A845F3_Out_3, _Multiply_6686FA7E_Out_2, _Add_2A5A5D89_Out_2);
				float _Add_4F1E7955_Out_2;
				Unity_Add_float(3, _Property_5C65111_Out_0, _Add_4F1E7955_Out_2);
				float _Divide_1D64A51E_Out_2;
				Unity_Divide_float(_Add_2A5A5D89_Out_2, _Add_4F1E7955_Out_2, _Divide_1D64A51E_Out_2);
				float4 _Lerp_CDFA72F8_Out_3;
				Unity_Lerp_float4(_Property_865DEE29_Out_0, _Property_F3C9D8B3_Out_0, (_Divide_1D64A51E_Out_2.xxxx), _Lerp_CDFA72F8_Out_3);
				float _Property_35DFD419_Out_0 = Vector1_118F9AE3;
				float _FresnelEffect_83B46249_Out_3;
				Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_35DFD419_Out_0, _FresnelEffect_83B46249_Out_3);
				float _Multiply_F334F639_Out_2;
				Unity_Multiply_float(_Divide_1D64A51E_Out_2, _FresnelEffect_83B46249_Out_3, _Multiply_F334F639_Out_2);
				float _Property_2492BFC2_Out_0 = Vector1_7DCA2CFD;
				float _Multiply_C0F0E976_Out_2;
				Unity_Multiply_float(_Multiply_F334F639_Out_2, _Property_2492BFC2_Out_0, _Multiply_C0F0E976_Out_2);
				float4 _Add_89A566DC_Out_2;
				Unity_Add_float4(_Lerp_CDFA72F8_Out_3, (_Multiply_C0F0E976_Out_2.xxxx), _Add_89A566DC_Out_2);
				float _SceneDepth_668E6505_Out_1;
				Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_668E6505_Out_1);
				float4 _ScreenPosition_7A918B87_Out_0 = float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0);
				float _Split_AD68455A_R_1 = _ScreenPosition_7A918B87_Out_0[0];
				float _Split_AD68455A_G_2 = _ScreenPosition_7A918B87_Out_0[1];
				float _Split_AD68455A_B_3 = _ScreenPosition_7A918B87_Out_0[2];
				float _Split_AD68455A_A_4 = _ScreenPosition_7A918B87_Out_0[3];
				float _Subtract_F47D7244_Out_2;
				Unity_Subtract_float(_Split_AD68455A_A_4, 1, _Subtract_F47D7244_Out_2);
				float _Subtract_8FC40A28_Out_2;
				Unity_Subtract_float(_SceneDepth_668E6505_Out_1, _Subtract_F47D7244_Out_2, _Subtract_8FC40A28_Out_2);
				float _Property_AE1CB25B_Out_0 = Vector1_7C6FDCBA;
				float _Divide_8BDAB4AF_Out_2;
				Unity_Divide_float(_Subtract_8FC40A28_Out_2, _Property_AE1CB25B_Out_0, _Divide_8BDAB4AF_Out_2);
				float _Saturate_B2153262_Out_1;
				Unity_Saturate_float(_Divide_8BDAB4AF_Out_2, _Saturate_B2153262_Out_1);
				surface.Albedo = (_Add_89A566DC_Out_2.xyz);
				surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
				surface.Alpha = _Saturate_B2153262_Out_1;
				surface.AlphaClipThreshold = 0.5;
				return surface;
			}

			struct GraphVertexInput
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 tangent : TANGENT;
				float4 texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};


			struct VertexOutput
			{
				float2 uv           : TEXCOORD0;
				float4 clipPos      : SV_POSITION;
				// Interpolators defined by graph
				float3 WorldSpacePosition : TEXCOORD3;
				float3 WorldSpaceNormal : TEXCOORD4;
				float3 WorldSpaceTangent : TEXCOORD5;
				float3 WorldSpaceBiTangent : TEXCOORD6;
				float3 WorldSpaceViewDirection : TEXCOORD7;
				float4 ScreenPosition : TEXCOORD8;
				half4 uv1 : TEXCOORD9;

				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			VertexOutput vert(GraphVertexInput v)
			{
				VertexOutput o = (VertexOutput)0;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				// Vertex transformations performed by graph
				float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
				float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
				float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
				float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
				float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
				float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
				float4 uv1 = v.texcoord1;
				float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
				float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

				VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

				// Vertex description inputs defined by graph
				vdi.ObjectSpaceNormal = ObjectSpaceNormal;
				vdi.WorldSpaceNormal = WorldSpaceNormal;
				vdi.ObjectSpacePosition = ObjectSpacePosition;
				vdi.WorldSpacePosition = WorldSpacePosition;
				vdi.TimeParameters = _TimeParameters.xyz;

				VertexDescription vd = PopulateVertexData(vdi);
				v.vertex.xyz = vd.Position;

				// Vertex shader outputs defined by graph
				o.WorldSpacePosition = WorldSpacePosition;
				o.WorldSpaceNormal = WorldSpaceNormal;
				o.WorldSpaceTangent = WorldSpaceTangent;
				o.WorldSpaceBiTangent = WorldSpaceBiTangent;
				o.WorldSpaceViewDirection = WorldSpaceViewDirection;
				o.ScreenPosition = ScreenPosition;
				o.uv1 = uv1;

				o.clipPos = TransformObjectToHClip(v.vertex.xyz);
				return o;
			}

			half4 frag(VertexOutput IN) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

				// Pixel transformations performed by graph
				float3 WorldSpacePosition = IN.WorldSpacePosition;
				float3 WorldSpaceNormal = IN.WorldSpaceNormal;
				float3 WorldSpaceTangent = IN.WorldSpaceTangent;
				float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
				float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
				float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
				float4 ScreenPosition = IN.ScreenPosition;
				float4 uv1 = IN.uv1;
				float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

				SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

				// Surface description inputs defined by graph
				surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
				surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
				surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
				surfaceInput.WorldSpacePosition = WorldSpacePosition;
				surfaceInput.ScreenPosition = ScreenPosition;
				surfaceInput.TimeParameters = _TimeParameters.xyz;

				SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

				float3 Albedo = float3(0.5, 0.5, 0.5);
				float3 Emission = 0;
				float Alpha = 1;
				float AlphaClipThreshold = 0;

				// Surface description remap performed by graph
				Albedo = surf.Albedo;
				Emission = surf.Emission;
				Alpha = surf.Alpha;
				AlphaClipThreshold = surf.AlphaClipThreshold;

		 #if _AlphaClip
				clip(Alpha - AlphaClipThreshold);
		#endif
				return 0;
			}
			ENDHLSL
		}

			// This pass it not used during regular rendering, only for lightmap baking.
			Pass
			{
				Name "Meta"
				Tags{"LightMode" = "Meta"}

				Cull Off

				HLSLPROGRAM
				// Required to compile gles 2.0 with standard srp library
				#pragma prefer_hlslcc gles
				#pragma exclude_renderers d3d11_9x
				#pragma target 2.0

				#pragma vertex vert
				#pragma fragment frag

				float4 _MainTex_ST;

			// Defines generated by graph
			#define REQUIRE_DEPTH_TEXTURE

			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/MetaInput.hlsl"
			#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

			#pragma shader_feature _ _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A

				CBUFFER_START(UnityPerMaterial)
			float4 Vector4_58BB93F7;
			float Vector1_AF480FB0;
			float Vector1_6FC0738F;
			float4 Vector4_46291EA8;
			float Vector1_53879FF9;
			float4 Color_9CF0A665;
			float4 Color_761E3BF0;
			float Vector1_F326F04;
			float Vector1_5E914204;
			float Vector1_6EF1F52E;
			float Vector1_160035B9;
			float Vector1_767C2BCB;
			float Vector1_6FA2E258;
			float Vector1_CC7180D;
			float Vector1_118F9AE3;
			float Vector1_7DCA2CFD;
			float Vector1_7C6FDCBA;
			CBUFFER_END

			struct VertexDescriptionInputs
			{
				float3 ObjectSpaceNormal;
				float3 WorldSpaceNormal;
				float3 ObjectSpacePosition;
				float3 WorldSpacePosition;
				float3 TimeParameters;
			};

			struct SurfaceDescriptionInputs
			{
				float3 WorldSpaceNormal;
				float3 TangentSpaceNormal;
				float3 WorldSpaceViewDirection;
				float3 WorldSpacePosition;
				float4 ScreenPosition;
				float3 TimeParameters;
			};


			void Unity_Distance_float3(float3 A, float3 B, out float Out)
			{
				Out = distance(A, B);
			}

			void Unity_Divide_float(float A, float B, out float Out)
			{
				Out = A / B;
			}

			void Unity_Power_float(float A, float B, out float Out)
			{
				Out = pow(A, B);
			}

			void Unity_Multiply_float(float3 A, float3 B, out float3 Out)
			{
				Out = A * B;
			}

			void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
			{
				Rotation = radians(Rotation);

				float s = sin(Rotation);
				float c = cos(Rotation);
				float one_minus_c = 1.0 - c;

				Axis = normalize(Axis);

				float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
										  one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
										  one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
										};

				Out = mul(rot_mat,  In);
			}

			void Unity_Multiply_float(float A, float B, out float Out)
			{
				Out = A * B;
			}

			void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
			{
				Out = UV * Tiling + Offset;
			}


		float2 Unity_GradientNoise_Dir_float(float2 p)
		{
			// Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
			p = p % 289;
			float x = (34 * p.x + 1) * p.x % 289 + p.y;
			x = (34 * x + 1) * x % 289;
			x = frac(x / 41) * 2 - 1;
			return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
		}

			void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
			{
				float2 p = UV * Scale;
				float2 ip = floor(p);
				float2 fp = frac(p);
				float d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);
				float d01 = dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));
				float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1, 0));
				float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 1)), fp - float2(1, 1));
				fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
				Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
			}

			void Unity_Add_float(float A, float B, out float Out)
			{
				Out = A + B;
			}

			void Unity_Saturate_float(float In, out float Out)
			{
				Out = saturate(In);
			}

			void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
			{
				RGBA = float4(R, G, B, A);
				RGB = float3(R, G, B);
				RG = float2(R, G);
			}

			void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
			{
				Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
			}

			void Unity_Absolute_float(float In, out float Out)
			{
				Out = abs(In);
			}

			void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
			{
				Out = smoothstep(Edge1, Edge2, In);
			}

			void Unity_Add_float3(float3 A, float3 B, out float3 Out)
			{
				Out = A + B;
			}

			void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
			{
				Out = lerp(A, B, T);
			}

			void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
			{
				Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
			}

			void Unity_Add_float4(float4 A, float4 B, out float4 Out)
			{
				Out = A + B;
			}

			void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
			{
				Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
			}

			void Unity_Subtract_float(float A, float B, out float Out)
			{
				Out = A - B;
			}

			struct VertexDescription
			{
				float3 Position;
			};

			VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				float _Distance_66864F21_Out_2;
				Unity_Distance_float3(SHADERGRAPH_OBJECT_POSITION, IN.WorldSpacePosition, _Distance_66864F21_Out_2);
				float _Property_365F1C22_Out_0 = Vector1_CC7180D;
				float _Divide_8FA1BFAE_Out_2;
				Unity_Divide_float(_Distance_66864F21_Out_2, _Property_365F1C22_Out_0, _Divide_8FA1BFAE_Out_2);
				float _Power_7BCE79D6_Out_2;
				Unity_Power_float(_Divide_8FA1BFAE_Out_2, 2, _Power_7BCE79D6_Out_2);
				float3 _Multiply_FB340743_Out_2;
				Unity_Multiply_float(IN.WorldSpaceNormal, (_Power_7BCE79D6_Out_2.xxx), _Multiply_FB340743_Out_2);
				float _Property_CFE1ED94_Out_0 = Vector1_F326F04;
				float _Property_D9B2DDCA_Out_0 = Vector1_5E914204;
				float4 _Property_AA563FF5_Out_0 = Vector4_58BB93F7;
				float _Split_160A2DF8_R_1 = _Property_AA563FF5_Out_0[0];
				float _Split_160A2DF8_G_2 = _Property_AA563FF5_Out_0[1];
				float _Split_160A2DF8_B_3 = _Property_AA563FF5_Out_0[2];
				float _Split_160A2DF8_A_4 = _Property_AA563FF5_Out_0[3];
				float3 _RotateAboutAxis_5F14F802_Out_3;
				Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_AA563FF5_Out_0.xyz), _Split_160A2DF8_A_4, _RotateAboutAxis_5F14F802_Out_3);
				float _Property_A6C59C8E_Out_0 = Vector1_6FC0738F;
				float _Multiply_A0E0F4C7_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_A6C59C8E_Out_0, _Multiply_A0E0F4C7_Out_2);
				float2 _TilingAndOffset_A4D1A3ED_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_A0E0F4C7_Out_2.xx), _TilingAndOffset_A4D1A3ED_Out_3);
				float _Property_B4B4E9CF_Out_0 = Vector1_AF480FB0;
				float _GradientNoise_A0D3B5C3_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_A4D1A3ED_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_A0D3B5C3_Out_2);
				float2 _TilingAndOffset_1E5A0899_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_1E5A0899_Out_3);
				float _GradientNoise_CE0772DA_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_1E5A0899_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_CE0772DA_Out_2);
				float _Add_D140788A_Out_2;
				Unity_Add_float(_GradientNoise_A0D3B5C3_Out_2, _GradientNoise_CE0772DA_Out_2, _Add_D140788A_Out_2);
				float _Divide_431432EB_Out_2;
				Unity_Divide_float(_Add_D140788A_Out_2, 2, _Divide_431432EB_Out_2);
				float _Saturate_3045B206_Out_1;
				Unity_Saturate_float(_Divide_431432EB_Out_2, _Saturate_3045B206_Out_1);
				float _Property_4A5644FC_Out_0 = Vector1_6EF1F52E;
				float _Power_9FF66C0B_Out_2;
				Unity_Power_float(_Saturate_3045B206_Out_1, _Property_4A5644FC_Out_0, _Power_9FF66C0B_Out_2);
				float4 _Property_C94C128A_Out_0 = Vector4_46291EA8;
				float _Split_23A88146_R_1 = _Property_C94C128A_Out_0[0];
				float _Split_23A88146_G_2 = _Property_C94C128A_Out_0[1];
				float _Split_23A88146_B_3 = _Property_C94C128A_Out_0[2];
				float _Split_23A88146_A_4 = _Property_C94C128A_Out_0[3];
				float4 _Combine_1590CA62_RGBA_4;
				float3 _Combine_1590CA62_RGB_5;
				float2 _Combine_1590CA62_RG_6;
				Unity_Combine_float(_Split_23A88146_R_1, _Split_23A88146_G_2, 0, 0, _Combine_1590CA62_RGBA_4, _Combine_1590CA62_RGB_5, _Combine_1590CA62_RG_6);
				float4 _Combine_818D0AEF_RGBA_4;
				float3 _Combine_818D0AEF_RGB_5;
				float2 _Combine_818D0AEF_RG_6;
				Unity_Combine_float(_Split_23A88146_B_3, _Split_23A88146_A_4, 0, 0, _Combine_818D0AEF_RGBA_4, _Combine_818D0AEF_RGB_5, _Combine_818D0AEF_RG_6);
				float _Remap_E8E080A5_Out_3;
				Unity_Remap_float(_Power_9FF66C0B_Out_2, _Combine_1590CA62_RG_6, _Combine_818D0AEF_RG_6, _Remap_E8E080A5_Out_3);
				float _Absolute_10AFA310_Out_1;
				Unity_Absolute_float(_Remap_E8E080A5_Out_3, _Absolute_10AFA310_Out_1);
				float _Smoothstep_53A845F3_Out_3;
				Unity_Smoothstep_float(_Property_CFE1ED94_Out_0, _Property_D9B2DDCA_Out_0, _Absolute_10AFA310_Out_1, _Smoothstep_53A845F3_Out_3);
				float _Property_52DC056C_Out_0 = Vector1_767C2BCB;
				float _Multiply_29661DD6_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_52DC056C_Out_0, _Multiply_29661DD6_Out_2);
				float2 _TilingAndOffset_AC342860_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_29661DD6_Out_2.xx), _TilingAndOffset_AC342860_Out_3);
				float _Property_A82178B0_Out_0 = Vector1_160035B9;
				float _GradientNoise_49D66967_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_AC342860_Out_3, _Property_A82178B0_Out_0, _GradientNoise_49D66967_Out_2);
				float _Property_5C65111_Out_0 = Vector1_6FA2E258;
				float _Multiply_6686FA7E_Out_2;
				Unity_Multiply_float(_GradientNoise_49D66967_Out_2, _Property_5C65111_Out_0, _Multiply_6686FA7E_Out_2);
				float _Add_2A5A5D89_Out_2;
				Unity_Add_float(_Smoothstep_53A845F3_Out_3, _Multiply_6686FA7E_Out_2, _Add_2A5A5D89_Out_2);
				float _Add_4F1E7955_Out_2;
				Unity_Add_float(3, _Property_5C65111_Out_0, _Add_4F1E7955_Out_2);
				float _Divide_1D64A51E_Out_2;
				Unity_Divide_float(_Add_2A5A5D89_Out_2, _Add_4F1E7955_Out_2, _Divide_1D64A51E_Out_2);
				float3 _Multiply_EA80A68F_Out_2;
				Unity_Multiply_float(IN.ObjectSpaceNormal, (_Divide_1D64A51E_Out_2.xxx), _Multiply_EA80A68F_Out_2);
				float _Property_AD66F131_Out_0 = Vector1_53879FF9;
				float3 _Multiply_2BAF07B0_Out_2;
				Unity_Multiply_float(_Multiply_EA80A68F_Out_2, (_Property_AD66F131_Out_0.xxx), _Multiply_2BAF07B0_Out_2);
				float3 _Add_D5BE1A59_Out_2;
				Unity_Add_float3(IN.ObjectSpacePosition, _Multiply_2BAF07B0_Out_2, _Add_D5BE1A59_Out_2);
				float3 _Add_91EF4868_Out_2;
				Unity_Add_float3(_Multiply_FB340743_Out_2, _Add_D5BE1A59_Out_2, _Add_91EF4868_Out_2);
				description.Position = _Add_91EF4868_Out_2;
				return description;
			}

			struct SurfaceDescription
			{
				float3 Albedo;
				float3 Emission;
				float Alpha;
				float AlphaClipThreshold;
			};

			SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				float4 _Property_865DEE29_Out_0 = Color_9CF0A665;
				float4 _Property_F3C9D8B3_Out_0 = Color_761E3BF0;
				float _Property_CFE1ED94_Out_0 = Vector1_F326F04;
				float _Property_D9B2DDCA_Out_0 = Vector1_5E914204;
				float4 _Property_AA563FF5_Out_0 = Vector4_58BB93F7;
				float _Split_160A2DF8_R_1 = _Property_AA563FF5_Out_0[0];
				float _Split_160A2DF8_G_2 = _Property_AA563FF5_Out_0[1];
				float _Split_160A2DF8_B_3 = _Property_AA563FF5_Out_0[2];
				float _Split_160A2DF8_A_4 = _Property_AA563FF5_Out_0[3];
				float3 _RotateAboutAxis_5F14F802_Out_3;
				Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_AA563FF5_Out_0.xyz), _Split_160A2DF8_A_4, _RotateAboutAxis_5F14F802_Out_3);
				float _Property_A6C59C8E_Out_0 = Vector1_6FC0738F;
				float _Multiply_A0E0F4C7_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_A6C59C8E_Out_0, _Multiply_A0E0F4C7_Out_2);
				float2 _TilingAndOffset_A4D1A3ED_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_A0E0F4C7_Out_2.xx), _TilingAndOffset_A4D1A3ED_Out_3);
				float _Property_B4B4E9CF_Out_0 = Vector1_AF480FB0;
				float _GradientNoise_A0D3B5C3_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_A4D1A3ED_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_A0D3B5C3_Out_2);
				float2 _TilingAndOffset_1E5A0899_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_1E5A0899_Out_3);
				float _GradientNoise_CE0772DA_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_1E5A0899_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_CE0772DA_Out_2);
				float _Add_D140788A_Out_2;
				Unity_Add_float(_GradientNoise_A0D3B5C3_Out_2, _GradientNoise_CE0772DA_Out_2, _Add_D140788A_Out_2);
				float _Divide_431432EB_Out_2;
				Unity_Divide_float(_Add_D140788A_Out_2, 2, _Divide_431432EB_Out_2);
				float _Saturate_3045B206_Out_1;
				Unity_Saturate_float(_Divide_431432EB_Out_2, _Saturate_3045B206_Out_1);
				float _Property_4A5644FC_Out_0 = Vector1_6EF1F52E;
				float _Power_9FF66C0B_Out_2;
				Unity_Power_float(_Saturate_3045B206_Out_1, _Property_4A5644FC_Out_0, _Power_9FF66C0B_Out_2);
				float4 _Property_C94C128A_Out_0 = Vector4_46291EA8;
				float _Split_23A88146_R_1 = _Property_C94C128A_Out_0[0];
				float _Split_23A88146_G_2 = _Property_C94C128A_Out_0[1];
				float _Split_23A88146_B_3 = _Property_C94C128A_Out_0[2];
				float _Split_23A88146_A_4 = _Property_C94C128A_Out_0[3];
				float4 _Combine_1590CA62_RGBA_4;
				float3 _Combine_1590CA62_RGB_5;
				float2 _Combine_1590CA62_RG_6;
				Unity_Combine_float(_Split_23A88146_R_1, _Split_23A88146_G_2, 0, 0, _Combine_1590CA62_RGBA_4, _Combine_1590CA62_RGB_5, _Combine_1590CA62_RG_6);
				float4 _Combine_818D0AEF_RGBA_4;
				float3 _Combine_818D0AEF_RGB_5;
				float2 _Combine_818D0AEF_RG_6;
				Unity_Combine_float(_Split_23A88146_B_3, _Split_23A88146_A_4, 0, 0, _Combine_818D0AEF_RGBA_4, _Combine_818D0AEF_RGB_5, _Combine_818D0AEF_RG_6);
				float _Remap_E8E080A5_Out_3;
				Unity_Remap_float(_Power_9FF66C0B_Out_2, _Combine_1590CA62_RG_6, _Combine_818D0AEF_RG_6, _Remap_E8E080A5_Out_3);
				float _Absolute_10AFA310_Out_1;
				Unity_Absolute_float(_Remap_E8E080A5_Out_3, _Absolute_10AFA310_Out_1);
				float _Smoothstep_53A845F3_Out_3;
				Unity_Smoothstep_float(_Property_CFE1ED94_Out_0, _Property_D9B2DDCA_Out_0, _Absolute_10AFA310_Out_1, _Smoothstep_53A845F3_Out_3);
				float _Property_52DC056C_Out_0 = Vector1_767C2BCB;
				float _Multiply_29661DD6_Out_2;
				Unity_Multiply_float(IN.TimeParameters.x, _Property_52DC056C_Out_0, _Multiply_29661DD6_Out_2);
				float2 _TilingAndOffset_AC342860_Out_3;
				Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_29661DD6_Out_2.xx), _TilingAndOffset_AC342860_Out_3);
				float _Property_A82178B0_Out_0 = Vector1_160035B9;
				float _GradientNoise_49D66967_Out_2;
				Unity_GradientNoise_float(_TilingAndOffset_AC342860_Out_3, _Property_A82178B0_Out_0, _GradientNoise_49D66967_Out_2);
				float _Property_5C65111_Out_0 = Vector1_6FA2E258;
				float _Multiply_6686FA7E_Out_2;
				Unity_Multiply_float(_GradientNoise_49D66967_Out_2, _Property_5C65111_Out_0, _Multiply_6686FA7E_Out_2);
				float _Add_2A5A5D89_Out_2;
				Unity_Add_float(_Smoothstep_53A845F3_Out_3, _Multiply_6686FA7E_Out_2, _Add_2A5A5D89_Out_2);
				float _Add_4F1E7955_Out_2;
				Unity_Add_float(3, _Property_5C65111_Out_0, _Add_4F1E7955_Out_2);
				float _Divide_1D64A51E_Out_2;
				Unity_Divide_float(_Add_2A5A5D89_Out_2, _Add_4F1E7955_Out_2, _Divide_1D64A51E_Out_2);
				float4 _Lerp_CDFA72F8_Out_3;
				Unity_Lerp_float4(_Property_865DEE29_Out_0, _Property_F3C9D8B3_Out_0, (_Divide_1D64A51E_Out_2.xxxx), _Lerp_CDFA72F8_Out_3);
				float _Property_35DFD419_Out_0 = Vector1_118F9AE3;
				float _FresnelEffect_83B46249_Out_3;
				Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_35DFD419_Out_0, _FresnelEffect_83B46249_Out_3);
				float _Multiply_F334F639_Out_2;
				Unity_Multiply_float(_Divide_1D64A51E_Out_2, _FresnelEffect_83B46249_Out_3, _Multiply_F334F639_Out_2);
				float _Property_2492BFC2_Out_0 = Vector1_7DCA2CFD;
				float _Multiply_C0F0E976_Out_2;
				Unity_Multiply_float(_Multiply_F334F639_Out_2, _Property_2492BFC2_Out_0, _Multiply_C0F0E976_Out_2);
				float4 _Add_89A566DC_Out_2;
				Unity_Add_float4(_Lerp_CDFA72F8_Out_3, (_Multiply_C0F0E976_Out_2.xxxx), _Add_89A566DC_Out_2);
				float _SceneDepth_668E6505_Out_1;
				Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_668E6505_Out_1);
				float4 _ScreenPosition_7A918B87_Out_0 = float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0);
				float _Split_AD68455A_R_1 = _ScreenPosition_7A918B87_Out_0[0];
				float _Split_AD68455A_G_2 = _ScreenPosition_7A918B87_Out_0[1];
				float _Split_AD68455A_B_3 = _ScreenPosition_7A918B87_Out_0[2];
				float _Split_AD68455A_A_4 = _ScreenPosition_7A918B87_Out_0[3];
				float _Subtract_F47D7244_Out_2;
				Unity_Subtract_float(_Split_AD68455A_A_4, 1, _Subtract_F47D7244_Out_2);
				float _Subtract_8FC40A28_Out_2;
				Unity_Subtract_float(_SceneDepth_668E6505_Out_1, _Subtract_F47D7244_Out_2, _Subtract_8FC40A28_Out_2);
				float _Property_AE1CB25B_Out_0 = Vector1_7C6FDCBA;
				float _Divide_8BDAB4AF_Out_2;
				Unity_Divide_float(_Subtract_8FC40A28_Out_2, _Property_AE1CB25B_Out_0, _Divide_8BDAB4AF_Out_2);
				float _Saturate_B2153262_Out_1;
				Unity_Saturate_float(_Divide_8BDAB4AF_Out_2, _Saturate_B2153262_Out_1);
				surface.Albedo = (_Add_89A566DC_Out_2.xyz);
				surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
				surface.Alpha = _Saturate_B2153262_Out_1;
				surface.AlphaClipThreshold = 0.5;
				return surface;
			}

			struct GraphVertexInput
			{
				float4 vertex : POSITION;
				float3 normal : NORMAL;
				float4 tangent : TANGENT;
				float4 texcoord1 : TEXCOORD1;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};


			struct VertexOutput
			{
				float2 uv           : TEXCOORD0;
				float4 clipPos      : SV_POSITION;
				// Interpolators defined by graph
				float3 WorldSpacePosition : TEXCOORD3;
				float3 WorldSpaceNormal : TEXCOORD4;
				float3 WorldSpaceTangent : TEXCOORD5;
				float3 WorldSpaceBiTangent : TEXCOORD6;
				float3 WorldSpaceViewDirection : TEXCOORD7;
				float4 ScreenPosition : TEXCOORD8;
				half4 uv1 : TEXCOORD9;

				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
			};

			VertexOutput vert(GraphVertexInput v)
			{
				VertexOutput o = (VertexOutput)0;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO(o);

				// Vertex transformations performed by graph
				float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
				float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
				float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
				float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
				float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
				float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
				float4 uv1 = v.texcoord1;
				float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
				float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;


				// Vertex shader outputs defined by graph
				o.WorldSpacePosition = WorldSpacePosition;
				o.WorldSpaceNormal = WorldSpaceNormal;
				o.WorldSpaceTangent = WorldSpaceTangent;
				o.WorldSpaceBiTangent = WorldSpaceBiTangent;
				o.WorldSpaceViewDirection = WorldSpaceViewDirection;
				o.ScreenPosition = ScreenPosition;
				o.uv1 = uv1;

				o.clipPos = MetaVertexPosition(v.vertex, uv1, uv1, unity_LightmapST, unity_DynamicLightmapST);
				return o;
			}

			half4 frag(VertexOutput IN) : SV_TARGET
			{
				UNITY_SETUP_INSTANCE_ID(IN);
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(IN);

				// Pixel transformations performed by graph
				float3 WorldSpacePosition = IN.WorldSpacePosition;
				float3 WorldSpaceNormal = IN.WorldSpaceNormal;
				float3 WorldSpaceTangent = IN.WorldSpaceTangent;
				float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
				float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
				float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
				float4 ScreenPosition = IN.ScreenPosition;
				float4 uv1 = IN.uv1;
				float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

				SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

				// Surface description inputs defined by graph
				surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
				surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
				surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
				surfaceInput.WorldSpacePosition = WorldSpacePosition;
				surfaceInput.ScreenPosition = ScreenPosition;
				surfaceInput.TimeParameters = _TimeParameters.xyz;

				SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

				float3 Albedo = float3(0.5, 0.5, 0.5);
				float3 Emission = 0;
				float Alpha = 1;
				float AlphaClipThreshold = 0;

				// Surface description remap performed by graph
				Albedo = surf.Albedo;
				Emission = surf.Emission;
				Alpha = surf.Alpha;
				AlphaClipThreshold = surf.AlphaClipThreshold;

		 #if _AlphaClip
				clip(Alpha - AlphaClipThreshold);
		#endif

				MetaInput metaInput = (MetaInput)0;
				metaInput.Albedo = Albedo;
				metaInput.Emission = Emission;

				return MetaFragment(metaInput);
			}
			ENDHLSL
		}
		Pass
		{
			Tags{"LightMode" = "Lightweight2D"}

			// Material options generated by graph

			Blend SrcAlpha OneMinusSrcAlpha, One OneMinusSrcAlpha

			Cull Off

			ZTest LEqual

			ZWrite Off

			HLSLPROGRAM
				// Required to compile gles 2.0 with standard srp library
				#pragma enable_d3d11_debug_symbols
				#pragma prefer_hlslcc gles
				#pragma exclude_renderers d3d11_9x
				#pragma target 2.0

				#pragma vertex vert
				#pragma fragment frag

				// Defines generated by graph
				#define REQUIRE_DEPTH_TEXTURE

				#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Core.hlsl"
				#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/Lighting.hlsl"
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
				#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"
				#include "Packages/com.unity.render-pipelines.lightweight/ShaderLibrary/ShaderGraphFunctions.hlsl"

				CBUFFER_START(UnityPerMaterial)
				float4 Vector4_58BB93F7;
				float Vector1_AF480FB0;
				float Vector1_6FC0738F;
				float4 Vector4_46291EA8;
				float Vector1_53879FF9;
				float4 Color_9CF0A665;
				float4 Color_761E3BF0;
				float Vector1_F326F04;
				float Vector1_5E914204;
				float Vector1_6EF1F52E;
				float Vector1_160035B9;
				float Vector1_767C2BCB;
				float Vector1_6FA2E258;
				float Vector1_CC7180D;
				float Vector1_118F9AE3;
				float Vector1_7DCA2CFD;
				float Vector1_7C6FDCBA;
				CBUFFER_END

				struct VertexDescriptionInputs
				{
					float3 ObjectSpaceNormal;
					float3 WorldSpaceNormal;
					float3 ObjectSpacePosition;
					float3 WorldSpacePosition;
					float3 TimeParameters;
				};

				struct SurfaceDescriptionInputs
				{
					float3 WorldSpaceNormal;
					float3 TangentSpaceNormal;
					float3 WorldSpaceViewDirection;
					float3 WorldSpacePosition;
					float4 ScreenPosition;
					float3 TimeParameters;
				};


				void Unity_Distance_float3(float3 A, float3 B, out float Out)
				{
					Out = distance(A, B);
				}

				void Unity_Divide_float(float A, float B, out float Out)
				{
					Out = A / B;
				}

				void Unity_Power_float(float A, float B, out float Out)
				{
					Out = pow(A, B);
				}

				void Unity_Multiply_float(float3 A, float3 B, out float3 Out)
				{
					Out = A * B;
				}

				void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
				{
					Rotation = radians(Rotation);

					float s = sin(Rotation);
					float c = cos(Rotation);
					float one_minus_c = 1.0 - c;

					Axis = normalize(Axis);

					float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
											  one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
											  one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
											};

					Out = mul(rot_mat,  In);
				}

				void Unity_Multiply_float(float A, float B, out float Out)
				{
					Out = A * B;
				}

				void Unity_TilingAndOffset_float(float2 UV, float2 Tiling, float2 Offset, out float2 Out)
				{
					Out = UV * Tiling + Offset;
				}


			float2 Unity_GradientNoise_Dir_float(float2 p)
			{
				// Permutation and hashing used in webgl-nosie goo.gl/pX7HtC
				p = p % 289;
				float x = (34 * p.x + 1) * p.x % 289 + p.y;
				x = (34 * x + 1) * x % 289;
				x = frac(x / 41) * 2 - 1;
				return normalize(float2(x - floor(x + 0.5), abs(x) - 0.5));
			}

				void Unity_GradientNoise_float(float2 UV, float Scale, out float Out)
				{
					float2 p = UV * Scale;
					float2 ip = floor(p);
					float2 fp = frac(p);
					float d00 = dot(Unity_GradientNoise_Dir_float(ip), fp);
					float d01 = dot(Unity_GradientNoise_Dir_float(ip + float2(0, 1)), fp - float2(0, 1));
					float d10 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 0)), fp - float2(1, 0));
					float d11 = dot(Unity_GradientNoise_Dir_float(ip + float2(1, 1)), fp - float2(1, 1));
					fp = fp * fp * fp * (fp * (fp * 6 - 15) + 10);
					Out = lerp(lerp(d00, d01, fp.y), lerp(d10, d11, fp.y), fp.x) + 0.5;
				}

				void Unity_Add_float(float A, float B, out float Out)
				{
					Out = A + B;
				}

				void Unity_Saturate_float(float In, out float Out)
				{
					Out = saturate(In);
				}

				void Unity_Combine_float(float R, float G, float B, float A, out float4 RGBA, out float3 RGB, out float2 RG)
				{
					RGBA = float4(R, G, B, A);
					RGB = float3(R, G, B);
					RG = float2(R, G);
				}

				void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
				{
					Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
				}

				void Unity_Absolute_float(float In, out float Out)
				{
					Out = abs(In);
				}

				void Unity_Smoothstep_float(float Edge1, float Edge2, float In, out float Out)
				{
					Out = smoothstep(Edge1, Edge2, In);
				}

				void Unity_Add_float3(float3 A, float3 B, out float3 Out)
				{
					Out = A + B;
				}

				void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
				{
					Out = lerp(A, B, T);
				}

				void Unity_FresnelEffect_float(float3 Normal, float3 ViewDir, float Power, out float Out)
				{
					Out = pow((1.0 - saturate(dot(normalize(Normal), normalize(ViewDir)))), Power);
				}

				void Unity_Add_float4(float4 A, float4 B, out float4 Out)
				{
					Out = A + B;
				}

				void Unity_SceneDepth_Linear01_float(float4 UV, out float Out)
				{
					Out = Linear01Depth(SHADERGRAPH_SAMPLE_SCENE_DEPTH(UV.xy), _ZBufferParams);
				}

				void Unity_Subtract_float(float A, float B, out float Out)
				{
					Out = A - B;
				}

				struct VertexDescription
				{
					float3 Position;
				};

				VertexDescription PopulateVertexData(VertexDescriptionInputs IN)
				{
					VertexDescription description = (VertexDescription)0;
					float _Distance_66864F21_Out_2;
					Unity_Distance_float3(SHADERGRAPH_OBJECT_POSITION, IN.WorldSpacePosition, _Distance_66864F21_Out_2);
					float _Property_365F1C22_Out_0 = Vector1_CC7180D;
					float _Divide_8FA1BFAE_Out_2;
					Unity_Divide_float(_Distance_66864F21_Out_2, _Property_365F1C22_Out_0, _Divide_8FA1BFAE_Out_2);
					float _Power_7BCE79D6_Out_2;
					Unity_Power_float(_Divide_8FA1BFAE_Out_2, 2, _Power_7BCE79D6_Out_2);
					float3 _Multiply_FB340743_Out_2;
					Unity_Multiply_float(IN.WorldSpaceNormal, (_Power_7BCE79D6_Out_2.xxx), _Multiply_FB340743_Out_2);
					float _Property_CFE1ED94_Out_0 = Vector1_F326F04;
					float _Property_D9B2DDCA_Out_0 = Vector1_5E914204;
					float4 _Property_AA563FF5_Out_0 = Vector4_58BB93F7;
					float _Split_160A2DF8_R_1 = _Property_AA563FF5_Out_0[0];
					float _Split_160A2DF8_G_2 = _Property_AA563FF5_Out_0[1];
					float _Split_160A2DF8_B_3 = _Property_AA563FF5_Out_0[2];
					float _Split_160A2DF8_A_4 = _Property_AA563FF5_Out_0[3];
					float3 _RotateAboutAxis_5F14F802_Out_3;
					Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_AA563FF5_Out_0.xyz), _Split_160A2DF8_A_4, _RotateAboutAxis_5F14F802_Out_3);
					float _Property_A6C59C8E_Out_0 = Vector1_6FC0738F;
					float _Multiply_A0E0F4C7_Out_2;
					Unity_Multiply_float(IN.TimeParameters.x, _Property_A6C59C8E_Out_0, _Multiply_A0E0F4C7_Out_2);
					float2 _TilingAndOffset_A4D1A3ED_Out_3;
					Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_A0E0F4C7_Out_2.xx), _TilingAndOffset_A4D1A3ED_Out_3);
					float _Property_B4B4E9CF_Out_0 = Vector1_AF480FB0;
					float _GradientNoise_A0D3B5C3_Out_2;
					Unity_GradientNoise_float(_TilingAndOffset_A4D1A3ED_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_A0D3B5C3_Out_2);
					float2 _TilingAndOffset_1E5A0899_Out_3;
					Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_1E5A0899_Out_3);
					float _GradientNoise_CE0772DA_Out_2;
					Unity_GradientNoise_float(_TilingAndOffset_1E5A0899_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_CE0772DA_Out_2);
					float _Add_D140788A_Out_2;
					Unity_Add_float(_GradientNoise_A0D3B5C3_Out_2, _GradientNoise_CE0772DA_Out_2, _Add_D140788A_Out_2);
					float _Divide_431432EB_Out_2;
					Unity_Divide_float(_Add_D140788A_Out_2, 2, _Divide_431432EB_Out_2);
					float _Saturate_3045B206_Out_1;
					Unity_Saturate_float(_Divide_431432EB_Out_2, _Saturate_3045B206_Out_1);
					float _Property_4A5644FC_Out_0 = Vector1_6EF1F52E;
					float _Power_9FF66C0B_Out_2;
					Unity_Power_float(_Saturate_3045B206_Out_1, _Property_4A5644FC_Out_0, _Power_9FF66C0B_Out_2);
					float4 _Property_C94C128A_Out_0 = Vector4_46291EA8;
					float _Split_23A88146_R_1 = _Property_C94C128A_Out_0[0];
					float _Split_23A88146_G_2 = _Property_C94C128A_Out_0[1];
					float _Split_23A88146_B_3 = _Property_C94C128A_Out_0[2];
					float _Split_23A88146_A_4 = _Property_C94C128A_Out_0[3];
					float4 _Combine_1590CA62_RGBA_4;
					float3 _Combine_1590CA62_RGB_5;
					float2 _Combine_1590CA62_RG_6;
					Unity_Combine_float(_Split_23A88146_R_1, _Split_23A88146_G_2, 0, 0, _Combine_1590CA62_RGBA_4, _Combine_1590CA62_RGB_5, _Combine_1590CA62_RG_6);
					float4 _Combine_818D0AEF_RGBA_4;
					float3 _Combine_818D0AEF_RGB_5;
					float2 _Combine_818D0AEF_RG_6;
					Unity_Combine_float(_Split_23A88146_B_3, _Split_23A88146_A_4, 0, 0, _Combine_818D0AEF_RGBA_4, _Combine_818D0AEF_RGB_5, _Combine_818D0AEF_RG_6);
					float _Remap_E8E080A5_Out_3;
					Unity_Remap_float(_Power_9FF66C0B_Out_2, _Combine_1590CA62_RG_6, _Combine_818D0AEF_RG_6, _Remap_E8E080A5_Out_3);
					float _Absolute_10AFA310_Out_1;
					Unity_Absolute_float(_Remap_E8E080A5_Out_3, _Absolute_10AFA310_Out_1);
					float _Smoothstep_53A845F3_Out_3;
					Unity_Smoothstep_float(_Property_CFE1ED94_Out_0, _Property_D9B2DDCA_Out_0, _Absolute_10AFA310_Out_1, _Smoothstep_53A845F3_Out_3);
					float _Property_52DC056C_Out_0 = Vector1_767C2BCB;
					float _Multiply_29661DD6_Out_2;
					Unity_Multiply_float(IN.TimeParameters.x, _Property_52DC056C_Out_0, _Multiply_29661DD6_Out_2);
					float2 _TilingAndOffset_AC342860_Out_3;
					Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_29661DD6_Out_2.xx), _TilingAndOffset_AC342860_Out_3);
					float _Property_A82178B0_Out_0 = Vector1_160035B9;
					float _GradientNoise_49D66967_Out_2;
					Unity_GradientNoise_float(_TilingAndOffset_AC342860_Out_3, _Property_A82178B0_Out_0, _GradientNoise_49D66967_Out_2);
					float _Property_5C65111_Out_0 = Vector1_6FA2E258;
					float _Multiply_6686FA7E_Out_2;
					Unity_Multiply_float(_GradientNoise_49D66967_Out_2, _Property_5C65111_Out_0, _Multiply_6686FA7E_Out_2);
					float _Add_2A5A5D89_Out_2;
					Unity_Add_float(_Smoothstep_53A845F3_Out_3, _Multiply_6686FA7E_Out_2, _Add_2A5A5D89_Out_2);
					float _Add_4F1E7955_Out_2;
					Unity_Add_float(3, _Property_5C65111_Out_0, _Add_4F1E7955_Out_2);
					float _Divide_1D64A51E_Out_2;
					Unity_Divide_float(_Add_2A5A5D89_Out_2, _Add_4F1E7955_Out_2, _Divide_1D64A51E_Out_2);
					float3 _Multiply_EA80A68F_Out_2;
					Unity_Multiply_float(IN.ObjectSpaceNormal, (_Divide_1D64A51E_Out_2.xxx), _Multiply_EA80A68F_Out_2);
					float _Property_AD66F131_Out_0 = Vector1_53879FF9;
					float3 _Multiply_2BAF07B0_Out_2;
					Unity_Multiply_float(_Multiply_EA80A68F_Out_2, (_Property_AD66F131_Out_0.xxx), _Multiply_2BAF07B0_Out_2);
					float3 _Add_D5BE1A59_Out_2;
					Unity_Add_float3(IN.ObjectSpacePosition, _Multiply_2BAF07B0_Out_2, _Add_D5BE1A59_Out_2);
					float3 _Add_91EF4868_Out_2;
					Unity_Add_float3(_Multiply_FB340743_Out_2, _Add_D5BE1A59_Out_2, _Add_91EF4868_Out_2);
					description.Position = _Add_91EF4868_Out_2;
					return description;
				}

				struct SurfaceDescription
				{
					float3 Albedo;
					float3 Normal;
					float3 Emission;
					float Metallic;
					float Smoothness;
					float Occlusion;
					float Alpha;
					float AlphaClipThreshold;
				};

				SurfaceDescription PopulateSurfaceData(SurfaceDescriptionInputs IN)
				{
					SurfaceDescription surface = (SurfaceDescription)0;
					float4 _Property_865DEE29_Out_0 = Color_9CF0A665;
					float4 _Property_F3C9D8B3_Out_0 = Color_761E3BF0;
					float _Property_CFE1ED94_Out_0 = Vector1_F326F04;
					float _Property_D9B2DDCA_Out_0 = Vector1_5E914204;
					float4 _Property_AA563FF5_Out_0 = Vector4_58BB93F7;
					float _Split_160A2DF8_R_1 = _Property_AA563FF5_Out_0[0];
					float _Split_160A2DF8_G_2 = _Property_AA563FF5_Out_0[1];
					float _Split_160A2DF8_B_3 = _Property_AA563FF5_Out_0[2];
					float _Split_160A2DF8_A_4 = _Property_AA563FF5_Out_0[3];
					float3 _RotateAboutAxis_5F14F802_Out_3;
					Unity_Rotate_About_Axis_Degrees_float(IN.WorldSpacePosition, (_Property_AA563FF5_Out_0.xyz), _Split_160A2DF8_A_4, _RotateAboutAxis_5F14F802_Out_3);
					float _Property_A6C59C8E_Out_0 = Vector1_6FC0738F;
					float _Multiply_A0E0F4C7_Out_2;
					Unity_Multiply_float(IN.TimeParameters.x, _Property_A6C59C8E_Out_0, _Multiply_A0E0F4C7_Out_2);
					float2 _TilingAndOffset_A4D1A3ED_Out_3;
					Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_A0E0F4C7_Out_2.xx), _TilingAndOffset_A4D1A3ED_Out_3);
					float _Property_B4B4E9CF_Out_0 = Vector1_AF480FB0;
					float _GradientNoise_A0D3B5C3_Out_2;
					Unity_GradientNoise_float(_TilingAndOffset_A4D1A3ED_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_A0D3B5C3_Out_2);
					float2 _TilingAndOffset_1E5A0899_Out_3;
					Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), float2 (0, 0), _TilingAndOffset_1E5A0899_Out_3);
					float _GradientNoise_CE0772DA_Out_2;
					Unity_GradientNoise_float(_TilingAndOffset_1E5A0899_Out_3, _Property_B4B4E9CF_Out_0, _GradientNoise_CE0772DA_Out_2);
					float _Add_D140788A_Out_2;
					Unity_Add_float(_GradientNoise_A0D3B5C3_Out_2, _GradientNoise_CE0772DA_Out_2, _Add_D140788A_Out_2);
					float _Divide_431432EB_Out_2;
					Unity_Divide_float(_Add_D140788A_Out_2, 2, _Divide_431432EB_Out_2);
					float _Saturate_3045B206_Out_1;
					Unity_Saturate_float(_Divide_431432EB_Out_2, _Saturate_3045B206_Out_1);
					float _Property_4A5644FC_Out_0 = Vector1_6EF1F52E;
					float _Power_9FF66C0B_Out_2;
					Unity_Power_float(_Saturate_3045B206_Out_1, _Property_4A5644FC_Out_0, _Power_9FF66C0B_Out_2);
					float4 _Property_C94C128A_Out_0 = Vector4_46291EA8;
					float _Split_23A88146_R_1 = _Property_C94C128A_Out_0[0];
					float _Split_23A88146_G_2 = _Property_C94C128A_Out_0[1];
					float _Split_23A88146_B_3 = _Property_C94C128A_Out_0[2];
					float _Split_23A88146_A_4 = _Property_C94C128A_Out_0[3];
					float4 _Combine_1590CA62_RGBA_4;
					float3 _Combine_1590CA62_RGB_5;
					float2 _Combine_1590CA62_RG_6;
					Unity_Combine_float(_Split_23A88146_R_1, _Split_23A88146_G_2, 0, 0, _Combine_1590CA62_RGBA_4, _Combine_1590CA62_RGB_5, _Combine_1590CA62_RG_6);
					float4 _Combine_818D0AEF_RGBA_4;
					float3 _Combine_818D0AEF_RGB_5;
					float2 _Combine_818D0AEF_RG_6;
					Unity_Combine_float(_Split_23A88146_B_3, _Split_23A88146_A_4, 0, 0, _Combine_818D0AEF_RGBA_4, _Combine_818D0AEF_RGB_5, _Combine_818D0AEF_RG_6);
					float _Remap_E8E080A5_Out_3;
					Unity_Remap_float(_Power_9FF66C0B_Out_2, _Combine_1590CA62_RG_6, _Combine_818D0AEF_RG_6, _Remap_E8E080A5_Out_3);
					float _Absolute_10AFA310_Out_1;
					Unity_Absolute_float(_Remap_E8E080A5_Out_3, _Absolute_10AFA310_Out_1);
					float _Smoothstep_53A845F3_Out_3;
					Unity_Smoothstep_float(_Property_CFE1ED94_Out_0, _Property_D9B2DDCA_Out_0, _Absolute_10AFA310_Out_1, _Smoothstep_53A845F3_Out_3);
					float _Property_52DC056C_Out_0 = Vector1_767C2BCB;
					float _Multiply_29661DD6_Out_2;
					Unity_Multiply_float(IN.TimeParameters.x, _Property_52DC056C_Out_0, _Multiply_29661DD6_Out_2);
					float2 _TilingAndOffset_AC342860_Out_3;
					Unity_TilingAndOffset_float((_RotateAboutAxis_5F14F802_Out_3.xy), float2 (1, 1), (_Multiply_29661DD6_Out_2.xx), _TilingAndOffset_AC342860_Out_3);
					float _Property_A82178B0_Out_0 = Vector1_160035B9;
					float _GradientNoise_49D66967_Out_2;
					Unity_GradientNoise_float(_TilingAndOffset_AC342860_Out_3, _Property_A82178B0_Out_0, _GradientNoise_49D66967_Out_2);
					float _Property_5C65111_Out_0 = Vector1_6FA2E258;
					float _Multiply_6686FA7E_Out_2;
					Unity_Multiply_float(_GradientNoise_49D66967_Out_2, _Property_5C65111_Out_0, _Multiply_6686FA7E_Out_2);
					float _Add_2A5A5D89_Out_2;
					Unity_Add_float(_Smoothstep_53A845F3_Out_3, _Multiply_6686FA7E_Out_2, _Add_2A5A5D89_Out_2);
					float _Add_4F1E7955_Out_2;
					Unity_Add_float(3, _Property_5C65111_Out_0, _Add_4F1E7955_Out_2);
					float _Divide_1D64A51E_Out_2;
					Unity_Divide_float(_Add_2A5A5D89_Out_2, _Add_4F1E7955_Out_2, _Divide_1D64A51E_Out_2);
					float4 _Lerp_CDFA72F8_Out_3;
					Unity_Lerp_float4(_Property_865DEE29_Out_0, _Property_F3C9D8B3_Out_0, (_Divide_1D64A51E_Out_2.xxxx), _Lerp_CDFA72F8_Out_3);
					float _Property_35DFD419_Out_0 = Vector1_118F9AE3;
					float _FresnelEffect_83B46249_Out_3;
					Unity_FresnelEffect_float(IN.WorldSpaceNormal, IN.WorldSpaceViewDirection, _Property_35DFD419_Out_0, _FresnelEffect_83B46249_Out_3);
					float _Multiply_F334F639_Out_2;
					Unity_Multiply_float(_Divide_1D64A51E_Out_2, _FresnelEffect_83B46249_Out_3, _Multiply_F334F639_Out_2);
					float _Property_2492BFC2_Out_0 = Vector1_7DCA2CFD;
					float _Multiply_C0F0E976_Out_2;
					Unity_Multiply_float(_Multiply_F334F639_Out_2, _Property_2492BFC2_Out_0, _Multiply_C0F0E976_Out_2);
					float4 _Add_89A566DC_Out_2;
					Unity_Add_float4(_Lerp_CDFA72F8_Out_3, (_Multiply_C0F0E976_Out_2.xxxx), _Add_89A566DC_Out_2);
					float _SceneDepth_668E6505_Out_1;
					Unity_SceneDepth_Linear01_float(float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0), _SceneDepth_668E6505_Out_1);
					float4 _ScreenPosition_7A918B87_Out_0 = float4(IN.ScreenPosition.xy / IN.ScreenPosition.w, 0, 0);
					float _Split_AD68455A_R_1 = _ScreenPosition_7A918B87_Out_0[0];
					float _Split_AD68455A_G_2 = _ScreenPosition_7A918B87_Out_0[1];
					float _Split_AD68455A_B_3 = _ScreenPosition_7A918B87_Out_0[2];
					float _Split_AD68455A_A_4 = _ScreenPosition_7A918B87_Out_0[3];
					float _Subtract_F47D7244_Out_2;
					Unity_Subtract_float(_Split_AD68455A_A_4, 1, _Subtract_F47D7244_Out_2);
					float _Subtract_8FC40A28_Out_2;
					Unity_Subtract_float(_SceneDepth_668E6505_Out_1, _Subtract_F47D7244_Out_2, _Subtract_8FC40A28_Out_2);
					float _Property_AE1CB25B_Out_0 = Vector1_7C6FDCBA;
					float _Divide_8BDAB4AF_Out_2;
					Unity_Divide_float(_Subtract_8FC40A28_Out_2, _Property_AE1CB25B_Out_0, _Divide_8BDAB4AF_Out_2);
					float _Saturate_B2153262_Out_1;
					Unity_Saturate_float(_Divide_8BDAB4AF_Out_2, _Saturate_B2153262_Out_1);
					surface.Albedo = (_Add_89A566DC_Out_2.xyz);
					surface.Normal = IN.TangentSpaceNormal;
					surface.Emission = IsGammaSpace() ? float3(0, 0, 0) : SRGBToLinear(float3(0, 0, 0));
					surface.Metallic = 0;
					surface.Smoothness = 0.5;
					surface.Occlusion = 1;
					surface.Alpha = _Saturate_B2153262_Out_1;
					surface.AlphaClipThreshold = 0.5;
					return surface;
				}

				struct GraphVertexInput
				{
					float4 vertex : POSITION;
					float3 normal : NORMAL;
					float4 tangent : TANGENT;
					float4 texcoord1 : TEXCOORD1;
					UNITY_VERTEX_INPUT_INSTANCE_ID
				};


				struct GraphVertexOutput
				{
					float4 clipPos                : SV_POSITION;
					// Interpolators defined by graph
					float3 WorldSpacePosition : TEXCOORD3;
					float3 WorldSpaceNormal : TEXCOORD4;
					float3 WorldSpaceTangent : TEXCOORD5;
					float3 WorldSpaceBiTangent : TEXCOORD6;
					float3 WorldSpaceViewDirection : TEXCOORD7;
					float4 ScreenPosition : TEXCOORD8;
					half4 uv1 : TEXCOORD9;

				};

				GraphVertexOutput vert(GraphVertexInput v)
				{
					GraphVertexOutput o = (GraphVertexOutput)0;

					// Vertex transformations performed by graph
					float3 WorldSpacePosition = mul(UNITY_MATRIX_M,v.vertex).xyz;
					float3 WorldSpaceNormal = normalize(mul(v.normal,(float3x3)UNITY_MATRIX_I_M));
					float3 WorldSpaceTangent = normalize(mul((float3x3)UNITY_MATRIX_M,v.tangent.xyz));
					float3 WorldSpaceBiTangent = cross(WorldSpaceNormal, WorldSpaceTangent.xyz) * v.tangent.w;
					float3 WorldSpaceViewDirection = _WorldSpaceCameraPos.xyz - mul(GetObjectToWorldMatrix(), float4(v.vertex.xyz, 1.0)).xyz;
					float4 ScreenPosition = ComputeScreenPos(mul(GetWorldToHClipMatrix(), mul(GetObjectToWorldMatrix(), v.vertex)), _ProjectionParams.x);
					float4 uv1 = v.texcoord1;
					float3 ObjectSpaceNormal = mul(WorldSpaceNormal,(float3x3)UNITY_MATRIX_M).xyz;
					float3 ObjectSpacePosition = mul(UNITY_MATRIX_I_M,float4(WorldSpacePosition,1.0)).xyz;

					VertexDescriptionInputs vdi = (VertexDescriptionInputs)0;

					// Vertex description inputs defined by graph
					vdi.ObjectSpaceNormal = ObjectSpaceNormal;
					vdi.WorldSpaceNormal = WorldSpaceNormal;
					vdi.ObjectSpacePosition = ObjectSpacePosition;
					vdi.WorldSpacePosition = WorldSpacePosition;
					vdi.TimeParameters = _TimeParameters.xyz;

					VertexDescription vd = PopulateVertexData(vdi);
					v.vertex.xyz = vd.Position;

					// Vertex shader outputs defined by graph
					o.WorldSpacePosition = WorldSpacePosition;
					o.WorldSpaceNormal = WorldSpaceNormal;
					o.WorldSpaceTangent = WorldSpaceTangent;
					o.WorldSpaceBiTangent = WorldSpaceBiTangent;
					o.WorldSpaceViewDirection = WorldSpaceViewDirection;
					o.ScreenPosition = ScreenPosition;
					o.uv1 = uv1;


					VertexPositionInputs vertexInput = GetVertexPositionInputs(v.vertex.xyz);
					o.clipPos = vertexInput.positionCS;

					return o;
				}

				half4 frag(GraphVertexOutput IN) : SV_Target
				{
					// Pixel transformations performed by graph
					float3 WorldSpacePosition = IN.WorldSpacePosition;
					float3 WorldSpaceNormal = IN.WorldSpaceNormal;
					float3 WorldSpaceTangent = IN.WorldSpaceTangent;
					float3 WorldSpaceBiTangent = IN.WorldSpaceBiTangent;
					float3 WorldSpaceViewDirection = IN.WorldSpaceViewDirection;
					float3x3 tangentSpaceTransform = float3x3(WorldSpaceTangent,WorldSpaceBiTangent,WorldSpaceNormal);
					float4 ScreenPosition = IN.ScreenPosition;
					float4 uv1 = IN.uv1;
					float3 TangentSpaceNormal = mul(WorldSpaceNormal,(float3x3)tangentSpaceTransform).xyz;

					SurfaceDescriptionInputs surfaceInput = (SurfaceDescriptionInputs)0;

					// Surface description inputs defined by graph
					surfaceInput.WorldSpaceNormal = WorldSpaceNormal;
					surfaceInput.TangentSpaceNormal = TangentSpaceNormal;
					surfaceInput.WorldSpaceViewDirection = WorldSpaceViewDirection;
					surfaceInput.WorldSpacePosition = WorldSpacePosition;
					surfaceInput.ScreenPosition = ScreenPosition;
					surfaceInput.TimeParameters = _TimeParameters.xyz;

					SurfaceDescription surf = PopulateSurfaceData(surfaceInput);

					float3 Albedo = float3(0.5, 0.5, 0.5);
					float3 Specular = float3(0, 0, 0);
					float Metallic = 1;
					float3 Normal = float3(0, 0, 1);
					float3 Emission = 0;
					float Smoothness = 0.5;
					float Occlusion = 1;
					float Alpha = 1;
					float AlphaClipThreshold = 0;

					// Surface description remap performed by graph
					Albedo = surf.Albedo;
					Normal = surf.Normal;
					Emission = surf.Emission;
					Metallic = surf.Metallic;
					Smoothness = surf.Smoothness;
					Occlusion = surf.Occlusion;
					Alpha = surf.Alpha;
					AlphaClipThreshold = surf.AlphaClipThreshold;


					// Computes fog factor per-vertex
					half4 color = half4(Albedo, Alpha);

			#if _AlphaClip
					clip(Alpha - AlphaClipThreshold);
			#endif
					return color;
				}

				ENDHLSL
			}
	}
		CustomEditor "UnityEditor.ShaderGraph.PBRMasterGUI"
					FallBack "Hidden/InternalErrorShader"
}
